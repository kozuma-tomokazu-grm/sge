{
  "name": "node-webpay",
  "version": "0.3.1",
  "description": "WebPay API wrapper for Node. (http://webpay.jp)",
  "main": "index.js",
  "directories": {
    "test": "test"
  },
  "scripts": {
    "test": "node ./test/index.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/yuichirowada/node-webpay.git"
  },
  "keywords": [
    "webpay",
    "payment"
  ],
  "author": {
    "name": "Yuichiro Wada"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/yuichirowada/node-webpay/issues"
  },
  "homepage": "https://github.com/yuichirowada/node-webpay",
  "devDependencies": {},
  "readme": "# node-webpay\r\n\r\nNode.jsでWebPayを使用するためのラッパーモジュールです。設定するパラメータの種類と内容については、https://webpay.jp/docs/api を参照してください。\r\n\r\n### セットアップ\r\n\r\n\r\n```js\r\nnpm install node-webpay\r\n```\r\n\r\n\r\n```js\r\n// auth文字列を渡して初期化\r\nvar auth = 'test_secret';\r\nvar webpay = require('node-webpay')(auth);\r\n\r\n// authには文字列の代わりにデフォルトパラメータを渡すこともできる\r\nvar webpay_ja_jpy = require('node-webpay')({\r\n\tauth: auth,\r\n\tcurrency: 'jpy',\r\n\tlang: 'ja'\r\n});\r\n```\r\n\r\nWebPayの各処理は以下の形式で実行します。\r\n\r\n```js\r\nwebpay(command, params, callback);\r\n\r\n// 例\r\nwebpay('charge', { /* 課金パラメータオブジェクト */ }, function(data){\r\n\tconsole.log(data);\r\n});\r\n```\r\n\r\n* command - 後述するコマンド名の文字列。params.commandで代用もできます（次の例参照）。\r\n* params - 各コマンドに渡すパラメータ（オブジェクト）。パラメータの種類や内容は[公式ドキュメント](https://webpay.jp/docs/api)を参照。\r\n* callback - サーバから返答が返ってきた際、またはnode-webpayがエラーを返す際に実行されるコールバック関数。サーバからの返答またはnode-webpayのエラー（両方ともオブジェクト形式）が引数として渡される。\r\n\r\n以下はcommand文字列をparams.commandに入れて実行する例です。\r\n\r\n```js\r\nwebpay(params, callback);\r\n\r\n// 実行例\r\nwebpay({ command: 'charge', /* 他の課金パラメータ */ }, function(data){\r\n\tconsole.log(data);\r\n});\r\n```\r\n\r\n#### パラメータオブジェクト（デフォルトパラメータ、コマンドパラメータ）\r\n\r\n初期化時に渡すデフォルトパラメータオブジェクト、もしくはコマンドごとに渡すパラメータオブジェクト（params）には、取引の関するパラメータの他に以下のパラメータを引数として渡すことができます。最初に設定したデフォルトパラメータは、各コマンドの実行時にオーバーライドできません（0.3.0から。0.3.0以前はオーバーライド可能）\r\n\r\n* auth - 認証キー。デフォルトパラメータでのみ有効かつ**必須項目**。\r\n* command - コマンド。実行時、webpayの1つ目の引数に文字列でコマンドが与えられている場合は無効。\r\n* lang - Webpayサーバから返されるエラーメッセージの言語。デフォルトは'en'。現在対応している言語は英語（'en'）と日本語（'ja'）。\r\n\r\n```js\r\n// デフォルトパラメータを与える場合、authパラメータは必須\r\n// ここで与えたデフォルトパラメータは各コマンド発行時の上書き不可\r\nvar webpay_ja_jpy = require('node-webpay')({\r\n\tauth: auth,\r\n\tcurrency: 'jpy',\r\n\tlang: 'ja'\r\n});\r\n```\r\n\r\n###  コマンド一覧\r\n\r\n* charge - 売上計上\r\n* auth - 仮売上計上（capture:'false'のショートカット）\r\n* refund - 払い戻し\r\n* capture - 仮売上の売上化\r\n* getCharge - 売上イベント取得・売上イベントリスト取得\r\n* createCustomer - customer作成\r\n* getCustomer - customer取得・customerリスト取得\r\n* updateCustomer - customer情報更新\r\n* deleteCustomer - customer削除\r\n* deleteActiveCard - customerからactive_cardのみ削除\r\n* createToken - token作成\r\n* getToken - token取得\r\n* createRecursion - 定期課金作成\r\n* getRecursion - 定期課金取得・定期課金リスト取得\r\n* resumeRecursion - 定期課金再開（未テスト）\r\n* deleteRecursion - 定期課金削除\r\n* getEvent - イベント取得・イベントリスト取得\r\n* getAccount - アカウント情報取得\r\n* deleteTestData - テストデータ削除\r\n\r\n### 実行例\r\n\r\n```js\r\n// 売上（charge）\r\nvar params = {\r\n\tamount: 1000,\r\n\tcurrency: 'jpy',\r\n\t'card[number]': '4242424242424242',\r\n\t'card[exp_month]': '11',\r\n\t'card[exp_year]': '2020',\r\n\t'card[cvc]': '1234',\r\n\t'card[name]': 'test taro'\r\n};\r\n\r\nwebpay('charge', params, function(data){\r\n\t// コールバック\r\n});\r\n\r\n\r\n// paramに与えるcardプロパティをオブジェクトとして渡すこともできます。\r\n// リスト取得時のcreatedプロパティも同様の記法ができます。\r\nvar params = {\r\n\tcommand: 'charge',\r\n\tamount: 1000,\r\n\tcurrency: 'jpy',\r\n\tcard: {\r\n\t\tnumber: '4242424242424242',\r\n\t\texp_month: 11,\r\n\t\texp_year: 2020,\r\n\t\tcvc: 1234,\r\n\t\tname: 'test taro'\r\n\t}\r\n};\r\n\r\nwebpay(params, function(data){\r\n\t// コールバック\r\n});\r\n\r\n\r\n// 仮売上（auth）\r\n\r\nvar params = {\r\n\tcommand: 'auth',\r\n\tamount: 1000,\r\n\tcurrency: 'jpy',\r\n\t'card[number]': '4242424242424242',\r\n\t'card[exp_month]': '11',\r\n\t'card[exp_year]': '2020',\r\n\t'card[cvc]': '1234',\r\n\t'card[name]': 'test taro'\r\n};\r\n\r\nwebpay(params, function(data){\r\n\t// コールバック\r\n});\r\n\r\n\r\n// 課金情報・課金リストの取得（getCharge）\r\n// getChargeコマンドを使用し、パラメータにidを設定すると課金情報が返されます。\r\n// パラメータにidを設定しない場合は課金リストが返されます。\r\n// これはgetCustomer、getRecursion、getEventの各コマンドでも同様です。（getTokens単一トークンの取得のみ）\r\n\r\nvar params = {\r\n\tcommand: 'getCharge',\r\n\tid: 'ch_3pV2bF7uZfVg7HW'\r\n};\r\n\r\nwebpay(params, function(data){\r\n\t// コールバック\r\n});\r\n\r\n```\r\n\r\n### 履歴\f\r\n* 0.0.1 初回リリース\r\n* 0.0.2, 0.0.3 npm publishでの問題回避など細かいアップデート\r\n* 0.1.0 オブジェクトネスト構造でパラメータを渡せるように修正\r\n* 0.2.0b1 デフォルトパラメータ追加\r\n* 0.2.0b2 エラー言語対応追加\r\n* 0.2.0b3 バグ対応\r\n* 0.2.0 バグ対応、テストスクリプト追加\r\n* 0.3.0b1 定期課金（Recursion）追加、デフォルトパラメータ仕様変更、エラー仕様変更\r\n* 0.3.0b2, b5, b6 マイナーバグ修正\r\n* 0.3.1 カード削除コマンド（deleteActiveCard）追加\r\n\r\n### todo\r\n\r\n* 独立したパラメータチェック機構\r\n* まともなテストスクリプト\r\n* サンプルページ\r\n* 時間サポート、uuidサポートの検討\r\n* 部分的APIサポートの検討\r\n* tokenオンリーモード（クライアントサイドでトークンを生成する場合など）\r\n",
  "readmeFilename": "README.md",
  "_id": "node-webpay@0.3.1",
  "dist": {
    "shasum": "bf8cac88f46fffafc8f277d5c246aab332bf6fc7"
  },
  "_from": "node-webpay@^0.3.1",
  "_resolved": "https://registry.npmjs.org/node-webpay/-/node-webpay-0.3.1.tgz"
}
