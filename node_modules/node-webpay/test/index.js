'use strict';

var assert = require("assert");
var util = require('util');


// create auth.js with one line like below
// module.exports = 'test_secret_xxxxxxxx:';
var auth = require('./auth');

// fail cases for object creation
try {
  var wp = require('../index')();
} catch (e) {
  assert(e === 'node-webpay: auth must be supplied and must be string',
    '#Generate Object: should generate error when no arguments are passed to initializer');
}

try {
  var wp = require('../index')();
} catch (e) {
  assert(e === 'node-webpay: auth must be supplied and must be string',
    '#Generate Object: should generate error when no arguments are passed to initializer');
}

try {
  var wp = require('../index')({});
} catch (e) {
  console.log(e);
  assert(e === 'node-webpay: auth must be supplied and must be string',
    '#Generate Object: should generate error when no arguments are passed to initializer');
}

// supply non-existent command
var wp = require('../index')(auth);
wp({command: 'noSuchCommand'}, function(data){
  assert(data.error.code === 'command_not_exist',
    '#No Command: should pass command_not_exist error when non-existent command is given');
  assert(data.error.param === 'noSuchCommand', '#No Command: should pass param to command_not_exist error when non-existent command is given')
});


console.log('# Object creation checks done');


// default webpay objects

// simple auth
var wp1 = require('../index')(auth);

// default object with auth and default currency
var wp2 = require('../index')({
    auth: auth,
    currency: 'jpy'
  });

var wp3 = require('../index')({
    auth: auth,
    currency: 'jpy',
    lang: 'ja'
  });

assert(typeof wp1 === 'function' &&
  typeof wp2 === 'function' &&
  typeof wp3 === 'function',
  '#Generate Object: webpay instances should be function');

function test_default_lang1() {
  wp2({
    command: 'charge',
    amount: 1000,
    currency: 'jpy',
    //'card[number]': '4242424242424242',
    'card[exp_month]': '11',
    'card[exp_year]': '2020',
    'card[cvc]': '1234',
    'card[name]': 'test taro'
  }, function(data){
    assert(data.error.message === 'The card number is invalid. Make sure the number entered matches your credit card.',
      '#Default Lang: default language should be English');
    next();
  });
}

// Default language is English, but overwritten with 'ja'
function test_default_lang2() {
  wp2({
    command: 'charge',
    amount: 1000,
    currency: 'jpy',
    lang: 'ja',
    //'card[number]': '4242424242424242',
    'card[exp_month]': '11',
    'card[exp_year]': '2020',
    'card[cvc]': '1234',
    'card[name]': 'test taro'
  }, function(data){
    assert(data.error.message === 'カードの番号が誤っています。再度ご確認ください。',
      '#Default Lang: Japanese error message should be returned');
    next();
  });
}

// Default language is Japanese
function test_default_lang3() {
  wp3({
    command: 'charge',
    amount: 1000,
    currency: 'jpy',
    //'card[number]': '4242424242424242',
    'card[exp_month]': '11',
    'card[exp_year]': '2020',
    'card[cvc]': '1234',
    'card[name]': 'test taro'
  }, function(data){
    assert(data.error.message === 'カードの番号が誤っています。再度ご確認ください。',
      '#Default Lang: Japanese error message should be returned');
    next();
  });
}

// Default language is Japanese, but overwritten with 'en'
function test_default_lang4() {
  wp3({
    command: 'charge',
    amount: 1000,
    currency: 'jpy',
    lang: 'en',
    //'card[number]': '4242424242424242',
    'card[exp_month]': '11',
    'card[exp_year]': '2020',
    'card[cvc]': '1234',
    'card[name]': 'test taro'
  }, function(data){
    assert(data.error.message === 'The card number is invalid. Make sure the number entered matches your credit card.',
      '#Default Lang: Japanese error message should be returned');
    console.log('# Default Language checks done');
    next();
  });
}

function test_no_command1() {

  wp1({
    amount: 1000,
    currency: 'jpy',
    'card[number]': '4242424242424242',
    'card[exp_month]': '11',
    'card[exp_year]': '2020',
    'card[cvc]': '1234',
    'card[name]': 'test taro'
  }, function(data) {
    assert(data.error.type === 'node-webpay' && data.error.code === 'no_command_supplied',
      '#No command-1: operation with no command should return node-webpay error message in callback');
      next();
  });
}


// delete all data
function test_deleteTextData() {
  wp1({
    command: 'deleteTestData'
  }, function(data){
    assert(data.deleted === true, '#deleteTestData: data should be deleted');
    console.log('# deleteTestData: everything from the test environment first');
    next();
  });
}

var tests = [
  test_default_lang1,
  test_default_lang2,
  test_default_lang3,
  test_default_lang4,
  test_no_command1,
  test_deleteTextData,
  require('./suite1.js')
];


function next() {
  tests.shift().call(null, arguments);
}

next();
