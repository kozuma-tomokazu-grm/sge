'use strict';

var assert = require("assert");

module.exports = function(wp){

  // suite 2 depends on the result of suite 1
  // uses data on Webpay server
  console.log('*** suite2 start');


  var auth = require('./auth');
  var wp = require('../index')({
    auth: auth,
    currency: 'jpy'
  });


  // line 1: get charge list
  function test_1_1(prevData) {
    wp({
      command: 'getCharge'
    }, function(data){
      assert(!data.hasOwnProperty('error'), '#getChargeList-1: params should not return error.');
      assert(data.object === 'list', '#getChargeList-1: should be list.');
      assert(/charges/.exec(data.url), '#getChargeList-1: should be charge list.');
      assert(data.count > 0, '#getChargeList-1: count should be bigger than 0.');
      console.log('# getChargeList-1: basic charge list');
      next(line1, data);
    });
  }

  function test_1_2(prevData) {
    wp({
      command: 'getCharge',
      'created[gt]' : prevData.data[prevData.count - 1].created + 100
    }, function(data){
      assert(!data.hasOwnProperty('error'), '#getChargeList-2: params should not return error.');
      assert(data.object === 'list', '#getChargeList-2: should be list.');
      assert(/charges/.exec(data.url), '#getChargeList-2: should be charge list.');
      assert(data.count === 0, '#getChargeList-2: count should be 0.');
      console.log('# getChargeList-2: basic charge list');
      next(line1, prevData);
    });
  }

  function test_1_3(prevData) {
    wp({
      command: 'getCharge',
      'created[gt]' : prevData.data[0].created - 100
    }, function(data){
      assert(!data.hasOwnProperty('error'), '#getChargeList-3: params should not return error.');
      assert(data.object === 'list', '#getChargeList-3: should be list.');
      assert(/charges/.exec(data.url), '#getChargeList-3: should be charge list.');
      assert(data.count > 0, '#getChargeList-3: count should be bigger than 0.');
      console.log('# getChargeList-3: basic charge list');
      next(line1, data);
    });
  }


  // line 2: get customer list
function test_2_1(prevData) {
  wp({
    command: 'getCustomer'
  }, function(data){
    assert(!data.hasOwnProperty('error'), '#getCustomerList-1: params should not return error.');
    assert(data.object === 'list', '#getCustomerList-1: should be list.');
    assert(/customers/.exec(data.url), '#getCustomerList-1: should be customer list.');
    assert(data.count > 0, '#getCustomerList-1: data count should be more than 0.');
    console.log('# getCustomerList-1: basic customer list');
    next(line2, data);
  });
}

  function test_2_2(prevData) {
    wp({
      command: 'getCustomer',
      created: {
        lt: prevData.data[prevData.count - 1].created
      }
    }, function(data){
      assert(!data.hasOwnProperty('error'), '#getCustomerList-2: params should not return error.');
      assert(data.object === 'list', '#getCustomerList-2: should be list.');
      assert(/customers/.exec(data.url), '#getCustomerList-2: should be customer list.');
      assert(data.count === 0, '#getCustomerList-2: data count should be 0.');
      console.log('# getCustomerList-2: basic customer list');
      next(line2, prevData);
    });
  }

  function test_2_3(prevData) {
    wp({
      command: 'deleteCustomer',
      id: prevData.data[0].id
    }, function(data){
      assert(!data.hasOwnProperty('error'), '#deleteCustomer-1: params should not return error.');
      console.log('# deleteCustomer-1: delete a customer');
      next(line2, data);
    });
  }

  function test_2_4(prevData) {
    wp({
      command: 'getCustomer'
    }, function(data){
      assert(!data.hasOwnProperty('error'), '#getCustomerList-3: params should not return error.');
      assert(data.object === 'list', '#getCustomerList-3: should be list.');
      assert(/customers/.exec(data.url), '#getCustomerList-3: should be customer list.');
      assert(data.count === 0, '#getCustomerList-3: data count should be 0.');
      console.log('# getCustomerList-3: basic customer list after deletion');
      next(line2, data);
    });
  }


  // line 3: get token list
  // cannot retrieve list for customer hence generates error
  function test_3_1(prevData) {
    wp({
      command: 'getToken'
    }, function(data){
      assert(data.hasOwnProperty('error'), '#getToken-1: params should return error.');
      console.log('# getToken-1: basic token list');
      next(line3, data);
    });
  }


  // line 4: get event list
  function test_4_1(prevData) {
    wp({
      command: 'getEvent'
    }, function(data){
      assert(!data.hasOwnProperty('error'), '#getEvent-1: params should not return error.');
      assert(data.object === 'list', '#getEvent-1: should be list.');
      assert(/events/.exec(data.url), '#getEvent-1: should be event list.');
      assert(data.count > 0, '#getEvent-1: data count should be more than 0.');
      console.log('# getEvent-1: basic event list');
      next(line4, data);
    });
  }

  function test_4_2(prevData) {
    wp({
      command: 'getEvent',
      offset: prevData.count - 1
    }, function(data){
      assert(!data.hasOwnProperty('error'), '#getEventList-2: params should not return error.');
      assert(data.object === 'list', '#getEventList-2: should be list.');
      assert(/events/.exec(data.url), '#getEventList-2: should be event list.');
      assert(data.data.length === 1, '#getEventList-2: data count should be 1.');
      console.log('# getEventList-2: basic event list count 2');
      next(line4, data);
    });
  }

  function test_4_3(prevData) {
    wp({
      command: 'getEvent',
      count: 2
    }, function(data){
      assert(!data.hasOwnProperty('error'), '#getEventList-3: params should not return error.');
      assert(data.object === 'list', '#getEventList-3: should be list.');
      assert(/events/.exec(data.url), '#getEventList-3: should be event list.');
      assert(data.data.length === 2, '#getEventList-3: data count should be 2.');
      console.log('# getEventList-3: basic event list count 2');
      next(line4, data);
    });
  }


  // line 5: get account
  function test_5_1(prevData) {
    wp({
      command: 'getAccount'
    }, function(data){
      assert(!data.hasOwnProperty('error'), '#getAccount-1: params should not return error.');
      assert(data.object === 'account', '#getAccount-1: should be account.');
      console.log('# getAccount-1: basic event list');
      next(line5, data);
    });
  }


  var line1 = [ test_1_1, test_1_2, test_1_3 ];
  var line2 = [ test_2_1, test_2_2, test_2_3, test_2_4 ];
  var line3 = [ test_3_1 ];
  var line4 = [ test_4_1, test_4_2, test_4_3 ];
  var line5 = [ test_5_1 ];

  var lines = [ line1, line2, line3, line4, line5 ];
  var linesDone = 0;

  function next(line) {
    var args = Array.prototype.slice.call(arguments);
    args.shift();
    if (line.length === 0) {
      linesDone++;
      if(lines.length === linesDone) {
        console.log('* suite 2 complete');
        require('./suite3.js')();
      }
    } else {
      line.shift().apply(null, args);
    }
  }

  lines.forEach(function(e){
    next(e);
  });
};
