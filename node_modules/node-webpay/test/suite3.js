'use strict';

var assert = require("assert");

module.exports = function(wp){

  console.log('*** suite3 start');


  var auth = require('./auth');
  var wp = require('../index')({
    auth: auth,
    currency: 'jpy'
  });


  // line 1: create a couple of customers
  function test_1_1(prevData) {
    wp({
      command: 'createCustomer',
      'card[number]': '4242424242424242',
      'card[exp_month]': '11',
      'card[exp_year]': '2020',
      'card[cvc]': '1234',
      'card[name]': 'test taro',
      description: 'RECURSION TEST 1'
    }, function(data) {
      assert(data.object === 'customer', '# createCustomer-2: data object should be customer');
      assert(data.active_card.object === 'card', '# createCustomer-2: active_card should be card');
      console.log('# createCustomer-2: created a customer for recursion test');
      next(line1, data);
    });
  }

  function test_1_2(prevData) {
    wp({
      command: 'createCustomer',
      'card[number]': '4242424242424242',
      'card[exp_month]': '12',
      'card[exp_year]': '2021',
      'card[cvc]': '1234',
      'card[name]': 'test taro two',
      description: 'RECURSION TEST 2'
    }, function(data) {
      assert(data.object === 'customer', '# createCustomer-3: data object should be customer');
      assert(data.active_card.object === 'card', '# createCustomer-3: active_card should be card');
      console.log('# createCustomer-3: created a customer for recursion test');
      next(line1, data);
    });
  }

function test_1_3(prevData) {
  wp({
    command: 'getCustomer'
  }, function(data) {
    // create data object for later use
    var idArray = [];
    data.data.forEach(function(e) {
      idArray.push(e.id);
    });
    next(line1, { customers: idArray, recursions: [] });
  });
}

function test_1_4(prevData) {
  wp({
    command: 'createRecursion',
    customer: prevData.customers[0],
    amount: 1000,
    period: 'month',
    description: 'テスト定期課金（月）'
  }, function(data) {
    assert(data.object === 'recursion', '# createRecursion-1: data object should be recursion');
    console.log('# createRecursion-1: created monthly recursion');

    // push recursion id for later use
    prevData.recursions.push(data.id);
    next(line1, prevData);
  });
}

function test_1_5(prevData) {
  wp({
    command: 'getRecursion',
    id: prevData.recursions[0]
  }, function(data) {
    assert(data.object === 'recursion', '# getRecursion-1: should be single id recursion object but not a list');
    assert(data.customer === prevData.customers[0], '# getRecursion-1: should be single id recursion object but not a list');
    console.log('# getRecursion-1: retrieved single recursion object by id');
    next(line1, prevData);
  });
}

function test_1_6(prevData) {
  wp({
    command: 'createRecursion',
    customer: prevData.customers[1],
    amount: 2000,
    period: 'year',
    description: 'テスト定期課金（年）',
    first_schedules: Date.now() + 86400000
  }, function(data) {
    assert(data.object === 'recursion', '# createRecursion-2: data object should be recursion');
    console.log('# createRecursion-2: created yearly recursion with first payment schedule in one day');

    // push recursion id for later use
    prevData.recursions.push(data.id);
    next(line1, prevData);
  });
}

function test_1_7(prevData) {
  wp({
    command: 'getRecursion'
  }, function(data) {
    assert(data.object === 'list', '# getRecursion-2: should be a list');
    assert(data.count === 2, '# getRecursion-2: list count should be 2');
    console.log('# getRecursion-2: retrieved recursion list');
    next(line1, prevData);
  });
}

function test_1_8(prevData) {
  wp({
    command: 'deleteRecursion',
    id: prevData.recursions[1]
  }, function(data) {
    assert(data.deleted === true, '# deleteRecursion-1: should be deleted');
    console.log('# deleteRecursion-1: deleted a recursion object');
    next(line1, prevData);
  });
}

function test_1_9(prevData) {
  wp({
    command: 'getRecursion'
  }, function(data) {
    assert(data.object === 'list', '# getRecursion-3: should be a list');
    assert(data.count === 1, '# getRecursion-3: list count should be 1');
    console.log('# getRecursion-3: retrieved recursion list with one deleted');
    next(line1, prevData);
  });
}




  var line1 = [ test_1_1, test_1_2, test_1_3, test_1_4, test_1_5, test_1_6, test_1_7, test_1_8, test_1_9 ];
  var lines = [ line1 ];
  var linesDone = 0;

  function next(line) {
    var args = Array.prototype.slice.call(arguments);
    args.shift();
    if (line.length === 0) {
      linesDone++;
      if(lines.length === linesDone) {
        console.log('* suite 3 complete');
        require('./suite4.js')();
      }
    } else {
      line.shift().apply(null, args);
    }
  }

  lines.forEach(function(e){
    next(e);
  });
};
