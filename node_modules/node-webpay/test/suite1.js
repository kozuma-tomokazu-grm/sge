'use strict';

var assert = require("assert");

module.exports = function(wp){

  console.log('*** suite1 start');

  var auth = require('./auth');
  var wp = require('../index')({
    auth: auth,
    currency: 'jpy'
  });

  // line 1: basic charge
  function test_1(prevData) {
    wp({
    	command: 'charge',
    	amount: 1000,
    	currency: 'jpy',
    	'card[number]': '4242424242424242',
    	'card[exp_month]': '11',
    	'card[exp_year]': '2020',
    	'card[cvc]': '1234',
    	'card[name]': 'test taro'
    }, function(data){
      assert(!data.hasOwnProperty('error'), '#charge-1: params should not return error.');
      assert(data.object === 'charge', '#charge-1: should be charge object.');
      assert(data.amount === 1000, '#charge-1: charged amount should be 1000.');
      console.log('# charge-1: basic charge');
      next(line1, data);
    });
  }

  function test_2(prevData) {
    wp({
  		command: 'getCharge',
  		id: prevData.id
    }, function(data){
      assert(prevData.id === data.id, '#getCharge-1: ids should match.');
      assert(data.object === 'charge', '#getCharge-1: object should be charge');
      assert(data.amount === 1000, '#getCharge-1: charged amount should be 1000.');
      console.log('# getCharge-1: getCharge');
      next(line1, data);
    });
  }

  function test_3(prevData) {
    wp({
			command: 'refund',
			id: prevData.id
		}, function(data){
			assert(prevData.id === data.id, '#refund-1: ids should match.');
			assert(data.object === 'charge', '#refund-1: data object should be charge');
			assert(data.amount === 1000, '#refund-1: amount should remain the same.');
			assert(data.amount_refunded === 1000, '#refund-1: full amount should be refunded.');
			console.log('# refund-1: refund full amount');
      next(line1, data);
		});
  }

  function test_1_4(prevData) {
    wp({
      command: 'charge',
      amount: 1000,
      currency: 'jpy',
      'card[number]': '4242424242424242',
      'card[exp_month]': '12',
      'card[exp_year]': '2020',
      'card[cvc]': '1234',
      'card[name]': 'test taro two'
    }, function(data){
      assert(!data.hasOwnProperty('error'), '#charge-3: params should not return error.');
      assert(data.object === 'charge', '#charge-3: should be charge object.');
      assert(data.amount === 1000, '#charge-3: charged amount should be 1000.');
      console.log('# charge-3: basic charge (later time)');
      next(line1, data);
    });
  }

  // line 2: charge error
  function test_4(prevData){
    wp({
    	command: 'charge',
    	amount: 1000,
    	currency: 'jpy'
    }, function(data){
    	assert(data.hasOwnProperty('error'), '#charge-2: params should return error.');
    	console.log('# charge-2: charge with no card');
      next(line2, data);
    });
  }

  // line 3: auth (object notation)
  function test_5(prevData) {
    wp({
    	command: 'auth',
    	amount: 1000,
    	currency: 'jpy',
      card: {
        number: '4242424242424242',
        exp_month: '11',
        exp_year: '2020',
        cvc: '1234',
        name: 'test taro'
      }
    }, function(data){
    	assert(data.object === 'charge', '#auth-1: data object should be charge');
    	assert(data.amount === 1000, '#auth-1: charged amount should be 1000.');
    	assert(data.captured === false, '#auth-1: charge should not be captured yet.');
    	console.log('# auth-1: basic auth');
      next(line3, data);
    });
  }

  function test_6(prevData) {
    wp({
  		command: 'capture',
  		id: prevData.id
  	}, function(data){
      assert(data.object === 'charge', '#capture-1: data object should be charge');
  		assert(data.paid === true, '#capture-1: should be paid');
  		assert(data.captured === true, '#capture-1: should be captured');
  		console.log('# capture-1: capture full amount');
      next(line3, data);
    });
  }

  function test_7(prevData) {
    wp({
			command: 'refund',
			id: prevData.id,
			amount: 500
		}, function(data){
			assert(data.object === 'charge', '#refund-2: data object should be charge');
			assert(prevData.id === data.id, '#refund-2: ids should match.');
			assert(data.amount === 1000, '#refund-2: amount should be 1000.');
			assert(data.amount_refunded === 500, '#refund-2: 500 should be refunded.');
			console.log('# refund-2: refund half amount');
      next(line3, data);
		});
  }

  // line 4: capture
  function test_8(prevData) {
    wp({
    	command: 'charge',
    	amount: 1000,
    	capture: false,
    	currency: 'jpy',
    	'card[number]': '4242424242424242',
    	'card[exp_month]': '11',
    	'card[exp_year]': '2020',
    	'card[cvc]': '1234',
    	'card[name]': 'test taro'
    }, function(data){
      assert(data.object === 'charge', '#auth-2: data object should be charge');
    	assert(data.amount === 1000, '#auth-2: charged amount should be 1000.');
    	assert(data.captured === false, '#auth-2: charge should not be captured yet.');
    	console.log('# auth-2: auth with charge command');
      next(line4, data);
    });
  }

  function test_9(prevData) {
    wp({
  		command: 'capture',
  		id: prevData.id,
  		amount: 500
  	}, function(data){
      assert(data.object === 'charge', '#capture-2: data object should be charge');
  		assert(data.amount_refunded === 500, '#capture-2: 500 should be captured (amount_refunded)');
  		assert(data.paid === true, '#capture-2: should be paid');
  		assert(data.captured === true, '#capture-2: should be captured');
  		console.log('# capture-2: capture half amount');
      next(line4, data);
    });
  }

  function test_10(prevData) {
    wp({
			command: 'capture',
			id: prevData.id,
			amount: 500
		}, function(data){
			assert(data.hasOwnProperty('error'), '#capture-3: should not be able to capture.');
			console.log('# capture-3: capture full amount after capturing half');
      next(line4, data);
    });
  }


  // line 5: token
  function test_11(prevData) {
    wp({
    	command: 'createToken',
    	'card[number]': '4242424242424242',
    	'card[exp_month]': '11',
    	'card[exp_year]': '2020',
    	'card[cvc]': '1234',
    	'card[name]': 'test taro'
    }, function(data){
      assert(data.object === 'token', '#createToken-1: data object should be token');
    	assert(data.card.object === 'card', '#createToken-1: card data object should be card');
    	console.log('# createToken-1: create a new token with card');
      next(line5, data);
    });
  }

  function test_12(prevData) {
    wp({
  		command: 'getToken',
  		id: prevData.id
  	}, function(data){
      assert(data.object === 'token', '#getToken-1: data object should be customer');
  		assert(data.card.object === 'card', '#getToken-1: card data object should be card');
  		assert(data.used === false, '#getToken-1: token has not been used yet');
  		console.log('# getToken-1: retrieve token');
      next(line5, data);
    });
  }

  function test_13(prevData) {
    wp({
			command: 'charge',
			amount: 1000,
			currency: 'jpy',
			card: prevData.id
		}, function(data){
      assert(data.object === 'charge', '#charge-3: object should be charge');
			assert(data.amount === 1000, '#charge-3: amount should be 1000');
			console.log('# charge-3: payment with token');
      next(line5, prevData);
    });
  }

  function test_14(prevData) {
    wp({
			command: 'getToken',
			id: prevData.id
		}, function(data){
      assert(data.object === 'token', '#getToken-2: data object should be customer');
			assert(data.card.object === 'card', '#getToken-2: card data object should be card');
			assert(data.used === true, '#getToken-2: token has been used');
			console.log('# getToken-2: retrieve token');
      next(line5, data);
    });
  }

  // line 6: customer
  function test_6_1(prevData) {
    wp({
      command: 'createCustomer',
      'card[number]': '4242424242424242',
      'card[exp_month]': '11',
      'card[exp_year]': '2020',
      'card[cvc]': '1234',
      'card[name]': 'test taro',
      description: 'TEST DESCRIPTION&^%$*#@!=+-_[]{}'
    }, function(data) {
      assert(data.object === 'customer', '# createCustomer-1: data object should be customer');
      assert(data.active_card.object === 'card', '# createCustomer-1: active_card should be card');
      console.log('# createCustomer-1: created a customer');
      next(line6, data);
    })
  }

  function test_6_2(prevData) {
    wp({
      command: 'getCustomer',
      id: prevData.id
    }, function(data) {
      assert(data.object === 'customer', '# getCustomer-1: data object should be customer');
      assert(data.description === 'TEST DESCRIPTION&^%$*#@!=+-_[]{}', '# getCustomer-1: description should be \'TEST DESCRIPTION&^%$*#@!=+-_[]{}\', but actually' + data.description)
      assert(data.id === prevData.id, '# getCustomer-1: id should be match with the previous');
      assert(data.active_card.object === 'card', '# getCustomer-1: active_card should be card');
      console.log('# getCustomer-1: get data of a customer');
      next(line6, data);
    })
  }



  var line1 = [ test_1, test_2, test_3, test_1_4 ];
  var line2 = [ test_4 ];
  var line3 = [ test_5, test_6, test_7 ];
  var line4 = [ test_8, test_9, test_10 ];
  var line5 = [ test_11, test_12, test_13, test_14 ];
  var line6 = [ test_6_1, test_6_2 ];

  var lines = [ line1, line2, line3, line4, line5, line6 ];
  var linesDone = 0;

  function next(line) {
    var args = Array.prototype.slice.call(arguments);
    args.shift();
    if (line.length === 0) {
      linesDone++;
      if(lines.length === linesDone) {
        console.log('* suite 1 complete');
        require('./suite2.js')();
      }
    } else {
      line.shift().apply(null, args);
    }
  }

  lines.forEach(function(e){
    next(e);
  });
};
