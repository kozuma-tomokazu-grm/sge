var _ = require('lodash');
var util = require('util');

var noConversionError = require('./error').noConversionError;

function normalize(fields, params) {
  var result = {};
  fields.forEach(function(f) {
    result[f] = params[f];
  });
  return result;
}

function isIgnored(v) {
  return _.isUndefined(v) || _.isNull(v);
}

function copyIfExists(fromObject, toObject, key, recurringFun) {
  var v = fromObject[key];
  if (!isIgnored(v))
    toObject[key] = _.isFunction(v[recurringFun]) ? v[recurringFun]() : v;
}

function stringifyField(data) {
  var string;
  if (_.isArray(data)) {
    return '[' + _.map(data, stringifyField).join(', ') + ']';
  } else if (_.isObject(data) && !_.isPlainObject(data)) {
    string = data.toString();
  } else {
    string = util.inspect(data);
  }
  return string.replace(/(\r?\n)/g, '$1  ');
}

function CardRequest(params) {
  params = normalize(this.fields, params);
  Object.defineProperty(this, '__attrs', { value: params });
}

CardRequest.prototype.fields = ['number', 'exp_month', 'exp_year', 'cvc', 'name'];

Object.defineProperty(CardRequest.prototype, 'number', {
  get: function() { return this.__attrs['number']; },

  set: function(value) {
    this.__attrs['number'] = value;
  },
  configurable: false,
  enumerable: true
});

Object.defineProperty(CardRequest.prototype, 'expMonth', {
  get: function() { return this.__attrs['exp_month']; },

  set: function(value) {
    this.__attrs['exp_month'] = value;
  },
  configurable: false,
  enumerable: true
});

Object.defineProperty(CardRequest.prototype, 'expYear', {
  get: function() { return this.__attrs['exp_year']; },

  set: function(value) {
    this.__attrs['exp_year'] = value;
  },
  configurable: false,
  enumerable: true
});

Object.defineProperty(CardRequest.prototype, 'cvc', {
  get: function() { return this.__attrs['cvc']; },

  set: function(value) {
    this.__attrs['cvc'] = value;
  },
  configurable: false,
  enumerable: true
});

Object.defineProperty(CardRequest.prototype, 'name', {
  get: function() { return this.__attrs['name']; },

  set: function(value) {
    this.__attrs['name'] = value;
  },
  configurable: false,
  enumerable: true
});

CardRequest.prototype.requestBody = function cardRequestRequestBody() {
  var result = {};
  copyIfExists(this.__attrs, result, 'number', 'requestBody');
  copyIfExists(this.__attrs, result, 'exp_month', 'requestBody');
  copyIfExists(this.__attrs, result, 'exp_year', 'requestBody');
  copyIfExists(this.__attrs, result, 'cvc', 'requestBody');
  copyIfExists(this.__attrs, result, 'name', 'requestBody');
  return result;
};

CardRequest.prototype.queryParams = function cardRequestQueryParams() {
  var result = {};
  return result;
};

CardRequest.prototype.toString = CardRequest.prototype.inspect = function cardRequestToString() {
  return '[CardRequest\n' +
  '  number: ' + stringifyField(this.__attrs['number']) + '\n' +
  '  expMonth: ' + stringifyField(this.__attrs['exp_month']) + '\n' +
  '  expYear: ' + stringifyField(this.__attrs['exp_year']) + '\n' +
  '  cvc: ' + stringifyField(this.__attrs['cvc']) + '\n' +
  '  name: ' + stringifyField(this.__attrs['name']) + '\n' +
  ']';
};


CardRequest.create = function createCardRequest(params) {
  if (params === null || params === undefined) {
    return noConversionError('CardRequest', params);
  }
  if (params instanceof CardRequest) {
    return params;
  }

  if (_.isPlainObject(params)) { return new CardRequest(params); }
  return noConversionError('CardRequest', params);
};
module.exports.CardRequest = CardRequest;

function ChargeRequestCreate(params) {
  params = normalize(this.fields, params);
  params['card'] = _.isObject(params['card']) ? new CardRequest(params['card']) : params['card'];
  Object.defineProperty(this, '__attrs', { value: params });
}

ChargeRequestCreate.prototype.fields = ['amount', 'currency', 'customer', 'shop', 'card', 'description', 'capture', 'expire_days', 'uuid'];

Object.defineProperty(ChargeRequestCreate.prototype, 'amount', {
  get: function() { return this.__attrs['amount']; },

  set: function(value) {
    this.__attrs['amount'] = value;
  },
  configurable: false,
  enumerable: true
});

Object.defineProperty(ChargeRequestCreate.prototype, 'currency', {
  get: function() { return this.__attrs['currency']; },

  set: function(value) {
    this.__attrs['currency'] = value;
  },
  configurable: false,
  enumerable: true
});

Object.defineProperty(ChargeRequestCreate.prototype, 'customer', {
  get: function() { return this.__attrs['customer']; },

  set: function(value) {
    this.__attrs['customer'] = value;
  },
  configurable: false,
  enumerable: true
});

Object.defineProperty(ChargeRequestCreate.prototype, 'shop', {
  get: function() { return this.__attrs['shop']; },

  set: function(value) {
    this.__attrs['shop'] = value;
  },
  configurable: false,
  enumerable: true
});

Object.defineProperty(ChargeRequestCreate.prototype, 'card', {
  get: function() { return this.__attrs['card']; },

  set: function(value) {
    value = _.isObject(value) ? new CardRequest(value) : value;
    this.__attrs['card'] = value;
  },
  configurable: false,
  enumerable: true
});

Object.defineProperty(ChargeRequestCreate.prototype, 'description', {
  get: function() { return this.__attrs['description']; },

  set: function(value) {
    this.__attrs['description'] = value;
  },
  configurable: false,
  enumerable: true
});

Object.defineProperty(ChargeRequestCreate.prototype, 'capture', {
  get: function() { return this.__attrs['capture']; },

  set: function(value) {
    this.__attrs['capture'] = value;
  },
  configurable: false,
  enumerable: true
});

Object.defineProperty(ChargeRequestCreate.prototype, 'expireDays', {
  get: function() { return this.__attrs['expire_days']; },

  set: function(value) {
    this.__attrs['expire_days'] = value;
  },
  configurable: false,
  enumerable: true
});

Object.defineProperty(ChargeRequestCreate.prototype, 'uuid', {
  get: function() { return this.__attrs['uuid']; },

  set: function(value) {
    this.__attrs['uuid'] = value;
  },
  configurable: false,
  enumerable: true
});

ChargeRequestCreate.prototype.requestBody = function chargeRequestCreateRequestBody() {
  var result = {};
  copyIfExists(this.__attrs, result, 'amount', 'requestBody');
  copyIfExists(this.__attrs, result, 'currency', 'requestBody');
  copyIfExists(this.__attrs, result, 'customer', 'requestBody');
  copyIfExists(this.__attrs, result, 'shop', 'requestBody');
  copyIfExists(this.__attrs, result, 'card', 'requestBody');
  copyIfExists(this.__attrs, result, 'description', 'requestBody');
  copyIfExists(this.__attrs, result, 'capture', 'requestBody');
  copyIfExists(this.__attrs, result, 'expire_days', 'requestBody');
  copyIfExists(this.__attrs, result, 'uuid', 'requestBody');
  return result;
};

ChargeRequestCreate.prototype.queryParams = function chargeRequestCreateQueryParams() {
  var result = {};
  return result;
};

ChargeRequestCreate.prototype.toString = ChargeRequestCreate.prototype.inspect = function chargeRequestCreateToString() {
  return '[ChargeRequestCreate\n' +
  '  amount: ' + stringifyField(this.__attrs['amount']) + '\n' +
  '  currency: ' + stringifyField(this.__attrs['currency']) + '\n' +
  '  customer: ' + stringifyField(this.__attrs['customer']) + '\n' +
  '  shop: ' + stringifyField(this.__attrs['shop']) + '\n' +
  '  card: ' + stringifyField(this.__attrs['card']) + '\n' +
  '  description: ' + stringifyField(this.__attrs['description']) + '\n' +
  '  capture: ' + stringifyField(this.__attrs['capture']) + '\n' +
  '  expireDays: ' + stringifyField(this.__attrs['expire_days']) + '\n' +
  '  uuid: ' + stringifyField(this.__attrs['uuid']) + '\n' +
  ']';
};


ChargeRequestCreate.create = function createChargeRequestCreate(params) {
  if (params === null || params === undefined) {
    return noConversionError('ChargeRequestCreate', params);
  }
  if (params instanceof ChargeRequestCreate) {
    return params;
  }

  if (_.isPlainObject(params)) { return new ChargeRequestCreate(params); }
  return noConversionError('ChargeRequestCreate', params);
};
module.exports.ChargeRequestCreate = ChargeRequestCreate;

function CardResponse(params) {
  params = normalize(this.fields, params);
  Object.defineProperty(this, '__attrs', { value: params });
}

CardResponse.prototype.fields = ['object', 'exp_month', 'exp_year', 'fingerprint', 'last4', 'type', 'cvc_check', 'name', 'country'];

Object.defineProperty(CardResponse.prototype, 'object', {
  get: function() { return this.__attrs['object']; },
  configurable: false,
  enumerable: true
});

Object.defineProperty(CardResponse.prototype, 'expMonth', {
  get: function() { return this.__attrs['exp_month']; },
  configurable: false,
  enumerable: true
});

Object.defineProperty(CardResponse.prototype, 'expYear', {
  get: function() { return this.__attrs['exp_year']; },
  configurable: false,
  enumerable: true
});

Object.defineProperty(CardResponse.prototype, 'fingerprint', {
  get: function() { return this.__attrs['fingerprint']; },
  configurable: false,
  enumerable: true
});

Object.defineProperty(CardResponse.prototype, 'last4', {
  get: function() { return this.__attrs['last4']; },
  configurable: false,
  enumerable: true
});

Object.defineProperty(CardResponse.prototype, 'type', {
  get: function() { return this.__attrs['type']; },
  configurable: false,
  enumerable: true
});

Object.defineProperty(CardResponse.prototype, 'cvcCheck', {
  get: function() { return this.__attrs['cvc_check']; },
  configurable: false,
  enumerable: true
});

Object.defineProperty(CardResponse.prototype, 'name', {
  get: function() { return this.__attrs['name']; },
  configurable: false,
  enumerable: true
});

Object.defineProperty(CardResponse.prototype, 'country', {
  get: function() { return this.__attrs['country']; },
  configurable: false,
  enumerable: true
});

CardResponse.prototype.requestBody = function cardResponseRequestBody() {
  var result = {};
  copyIfExists(this.__attrs, result, 'object', 'requestBody');
  copyIfExists(this.__attrs, result, 'exp_month', 'requestBody');
  copyIfExists(this.__attrs, result, 'exp_year', 'requestBody');
  copyIfExists(this.__attrs, result, 'fingerprint', 'requestBody');
  copyIfExists(this.__attrs, result, 'last4', 'requestBody');
  copyIfExists(this.__attrs, result, 'type', 'requestBody');
  copyIfExists(this.__attrs, result, 'cvc_check', 'requestBody');
  copyIfExists(this.__attrs, result, 'name', 'requestBody');
  copyIfExists(this.__attrs, result, 'country', 'requestBody');
  return result;
};

CardResponse.prototype.queryParams = function cardResponseQueryParams() {
  var result = {};
  return result;
};

CardResponse.prototype.toString = CardResponse.prototype.inspect = function cardResponseToString() {
  return '[CardResponse\n' +
  '  object: ' + stringifyField(this.__attrs['object']) + '\n' +
  '  expMonth: ' + stringifyField(this.__attrs['exp_month']) + '\n' +
  '  expYear: ' + stringifyField(this.__attrs['exp_year']) + '\n' +
  '  fingerprint: ' + stringifyField(this.__attrs['fingerprint']) + '\n' +
  '  last4: ' + stringifyField(this.__attrs['last4']) + '\n' +
  '  type: ' + stringifyField(this.__attrs['type']) + '\n' +
  '  cvcCheck: ' + stringifyField(this.__attrs['cvc_check']) + '\n' +
  '  name: ' + stringifyField(this.__attrs['name']) + '\n' +
  '  country: ' + stringifyField(this.__attrs['country']) + '\n' +
  ']';
};

module.exports.CardResponse = CardResponse;

function ChargeFeeResponse(params) {
  params = normalize(this.fields, params);
  Object.defineProperty(this, '__attrs', { value: params });
}

ChargeFeeResponse.prototype.fields = ['object', 'transaction_type', 'transaction_fee', 'rate', 'amount', 'created'];

Object.defineProperty(ChargeFeeResponse.prototype, 'object', {
  get: function() { return this.__attrs['object']; },
  configurable: false,
  enumerable: true
});

Object.defineProperty(ChargeFeeResponse.prototype, 'transactionType', {
  get: function() { return this.__attrs['transaction_type']; },
  configurable: false,
  enumerable: true
});

Object.defineProperty(ChargeFeeResponse.prototype, 'transactionFee', {
  get: function() { return this.__attrs['transaction_fee']; },
  configurable: false,
  enumerable: true
});

Object.defineProperty(ChargeFeeResponse.prototype, 'rate', {
  get: function() { return this.__attrs['rate']; },
  configurable: false,
  enumerable: true
});

Object.defineProperty(ChargeFeeResponse.prototype, 'amount', {
  get: function() { return this.__attrs['amount']; },
  configurable: false,
  enumerable: true
});

Object.defineProperty(ChargeFeeResponse.prototype, 'created', {
  get: function() { return this.__attrs['created']; },
  configurable: false,
  enumerable: true
});

ChargeFeeResponse.prototype.requestBody = function chargeFeeResponseRequestBody() {
  var result = {};
  copyIfExists(this.__attrs, result, 'object', 'requestBody');
  copyIfExists(this.__attrs, result, 'transaction_type', 'requestBody');
  copyIfExists(this.__attrs, result, 'transaction_fee', 'requestBody');
  copyIfExists(this.__attrs, result, 'rate', 'requestBody');
  copyIfExists(this.__attrs, result, 'amount', 'requestBody');
  copyIfExists(this.__attrs, result, 'created', 'requestBody');
  return result;
};

ChargeFeeResponse.prototype.queryParams = function chargeFeeResponseQueryParams() {
  var result = {};
  return result;
};

ChargeFeeResponse.prototype.toString = ChargeFeeResponse.prototype.inspect = function chargeFeeResponseToString() {
  return '[ChargeFeeResponse\n' +
  '  object: ' + stringifyField(this.__attrs['object']) + '\n' +
  '  transactionType: ' + stringifyField(this.__attrs['transaction_type']) + '\n' +
  '  transactionFee: ' + stringifyField(this.__attrs['transaction_fee']) + '\n' +
  '  rate: ' + stringifyField(this.__attrs['rate']) + '\n' +
  '  amount: ' + stringifyField(this.__attrs['amount']) + '\n' +
  '  created: ' + stringifyField(this.__attrs['created']) + '\n' +
  ']';
};

module.exports.ChargeFeeResponse = ChargeFeeResponse;

function ChargeResponse(params) {
  params = normalize(this.fields, params);
  params['card'] = _.isObject(params['card']) ? new CardResponse(params['card']) : params['card'];
  params['fees'] = _.isArray(params['fees']) ? params['fees'].map(function (x) { return _.isObject(x) ? new ChargeFeeResponse(x) : x; }) : params['fees'];
  Object.defineProperty(this, '__attrs', { value: params });
}

ChargeResponse.prototype.fields = ['id', 'object', 'livemode', 'amount', 'card', 'created', 'currency', 'paid', 'captured', 'refunded', 'amount_refunded', 'customer', 'recursion', 'shop', 'description', 'failure_message', 'expire_time', 'fees'];

Object.defineProperty(ChargeResponse.prototype, 'id', {
  get: function() { return this.__attrs['id']; },
  configurable: false,
  enumerable: true
});

Object.defineProperty(ChargeResponse.prototype, 'object', {
  get: function() { return this.__attrs['object']; },
  configurable: false,
  enumerable: true
});

Object.defineProperty(ChargeResponse.prototype, 'livemode', {
  get: function() { return this.__attrs['livemode']; },
  configurable: false,
  enumerable: true
});

Object.defineProperty(ChargeResponse.prototype, 'amount', {
  get: function() { return this.__attrs['amount']; },
  configurable: false,
  enumerable: true
});

Object.defineProperty(ChargeResponse.prototype, 'card', {
  get: function() { return this.__attrs['card']; },
  configurable: false,
  enumerable: true
});

Object.defineProperty(ChargeResponse.prototype, 'created', {
  get: function() { return this.__attrs['created']; },
  configurable: false,
  enumerable: true
});

Object.defineProperty(ChargeResponse.prototype, 'currency', {
  get: function() { return this.__attrs['currency']; },
  configurable: false,
  enumerable: true
});

Object.defineProperty(ChargeResponse.prototype, 'paid', {
  get: function() { return this.__attrs['paid']; },
  configurable: false,
  enumerable: true
});

Object.defineProperty(ChargeResponse.prototype, 'captured', {
  get: function() { return this.__attrs['captured']; },
  configurable: false,
  enumerable: true
});

Object.defineProperty(ChargeResponse.prototype, 'refunded', {
  get: function() { return this.__attrs['refunded']; },
  configurable: false,
  enumerable: true
});

Object.defineProperty(ChargeResponse.prototype, 'amountRefunded', {
  get: function() { return this.__attrs['amount_refunded']; },
  configurable: false,
  enumerable: true
});

Object.defineProperty(ChargeResponse.prototype, 'customer', {
  get: function() { return this.__attrs['customer']; },
  configurable: false,
  enumerable: true
});

Object.defineProperty(ChargeResponse.prototype, 'recursion', {
  get: function() { return this.__attrs['recursion']; },
  configurable: false,
  enumerable: true
});

Object.defineProperty(ChargeResponse.prototype, 'shop', {
  get: function() { return this.__attrs['shop']; },
  configurable: false,
  enumerable: true
});

Object.defineProperty(ChargeResponse.prototype, 'description', {
  get: function() { return this.__attrs['description']; },
  configurable: false,
  enumerable: true
});

Object.defineProperty(ChargeResponse.prototype, 'failureMessage', {
  get: function() { return this.__attrs['failure_message']; },
  configurable: false,
  enumerable: true
});

Object.defineProperty(ChargeResponse.prototype, 'expireTime', {
  get: function() { return this.__attrs['expire_time']; },
  configurable: false,
  enumerable: true
});

Object.defineProperty(ChargeResponse.prototype, 'fees', {
  get: function() { return this.__attrs['fees']; },
  configurable: false,
  enumerable: true
});

ChargeResponse.prototype.requestBody = function chargeResponseRequestBody() {
  var result = {};
  copyIfExists(this.__attrs, result, 'id', 'requestBody');
  copyIfExists(this.__attrs, result, 'object', 'requestBody');
  copyIfExists(this.__attrs, result, 'livemode', 'requestBody');
  copyIfExists(this.__attrs, result, 'amount', 'requestBody');
  copyIfExists(this.__attrs, result, 'card', 'requestBody');
  copyIfExists(this.__attrs, result, 'created', 'requestBody');
  copyIfExists(this.__attrs, result, 'currency', 'requestBody');
  copyIfExists(this.__attrs, result, 'paid', 'requestBody');
  copyIfExists(this.__attrs, result, 'captured', 'requestBody');
  copyIfExists(this.__attrs, result, 'refunded', 'requestBody');
  copyIfExists(this.__attrs, result, 'amount_refunded', 'requestBody');
  copyIfExists(this.__attrs, result, 'customer', 'requestBody');
  copyIfExists(this.__attrs, result, 'recursion', 'requestBody');
  copyIfExists(this.__attrs, result, 'shop', 'requestBody');
  copyIfExists(this.__attrs, result, 'description', 'requestBody');
  copyIfExists(this.__attrs, result, 'failure_message', 'requestBody');
  copyIfExists(this.__attrs, result, 'expire_time', 'requestBody');
  copyIfExists(this.__attrs, result, 'fees', 'requestBody');
  return result;
};

ChargeResponse.prototype.queryParams = function chargeResponseQueryParams() {
  var result = {};
  return result;
};

ChargeResponse.prototype.toString = ChargeResponse.prototype.inspect = function chargeResponseToString() {
  return '[ChargeResponse\n' +
  '  id: ' + stringifyField(this.__attrs['id']) + '\n' +
  '  object: ' + stringifyField(this.__attrs['object']) + '\n' +
  '  livemode: ' + stringifyField(this.__attrs['livemode']) + '\n' +
  '  amount: ' + stringifyField(this.__attrs['amount']) + '\n' +
  '  card: ' + stringifyField(this.__attrs['card']) + '\n' +
  '  created: ' + stringifyField(this.__attrs['created']) + '\n' +
  '  currency: ' + stringifyField(this.__attrs['currency']) + '\n' +
  '  paid: ' + stringifyField(this.__attrs['paid']) + '\n' +
  '  captured: ' + stringifyField(this.__attrs['captured']) + '\n' +
  '  refunded: ' + stringifyField(this.__attrs['refunded']) + '\n' +
  '  amountRefunded: ' + stringifyField(this.__attrs['amount_refunded']) + '\n' +
  '  customer: ' + stringifyField(this.__attrs['customer']) + '\n' +
  '  recursion: ' + stringifyField(this.__attrs['recursion']) + '\n' +
  '  shop: ' + stringifyField(this.__attrs['shop']) + '\n' +
  '  description: ' + stringifyField(this.__attrs['description']) + '\n' +
  '  failureMessage: ' + stringifyField(this.__attrs['failure_message']) + '\n' +
  '  expireTime: ' + stringifyField(this.__attrs['expire_time']) + '\n' +
  '  fees: ' + stringifyField(this.__attrs['fees']) + '\n' +
  ']';
};

module.exports.ChargeResponse = ChargeResponse;

function ChargeIdRequest(params) {
  params = normalize(this.fields, params);
  Object.defineProperty(this, '__attrs', { value: params });
}

ChargeIdRequest.prototype.fields = ['id'];

Object.defineProperty(ChargeIdRequest.prototype, 'id', {
  get: function() { return this.__attrs['id']; },

  set: function(value) {
    this.__attrs['id'] = value;
  },
  configurable: false,
  enumerable: true
});

ChargeIdRequest.prototype.requestBody = function chargeIdRequestRequestBody() {
  var result = {};
  return result;
};

ChargeIdRequest.prototype.queryParams = function chargeIdRequestQueryParams() {
  var result = {};
  return result;
};

ChargeIdRequest.prototype.toString = ChargeIdRequest.prototype.inspect = function chargeIdRequestToString() {
  return '[ChargeIdRequest\n' +
  '  id: ' + stringifyField(this.__attrs['id']) + '\n' +
  ']';
};


ChargeIdRequest.create = function createChargeIdRequest(params) {
  if (params === null || params === undefined) {
    return noConversionError('ChargeIdRequest', params);
  }
  if (params instanceof ChargeIdRequest) {
    return params;
  }

  if (_.isObject(params) && params instanceof ChargeResponse) { return new ChargeIdRequest({'id': params.id}); }
  if (_.isString(params)) { return new ChargeIdRequest({'id': params}); }
  if (_.isPlainObject(params)) { return new ChargeIdRequest(params); }
  return noConversionError('ChargeIdRequest', params);
};
module.exports.ChargeIdRequest = ChargeIdRequest;

function ChargeRequestWithAmount(params) {
  params = normalize(this.fields, params);
  Object.defineProperty(this, '__attrs', { value: params });
}

ChargeRequestWithAmount.prototype.fields = ['id', 'amount'];

Object.defineProperty(ChargeRequestWithAmount.prototype, 'id', {
  get: function() { return this.__attrs['id']; },

  set: function(value) {
    this.__attrs['id'] = value;
  },
  configurable: false,
  enumerable: true
});

Object.defineProperty(ChargeRequestWithAmount.prototype, 'amount', {
  get: function() { return this.__attrs['amount']; },

  set: function(value) {
    this.__attrs['amount'] = value;
  },
  configurable: false,
  enumerable: true
});

ChargeRequestWithAmount.prototype.requestBody = function chargeRequestWithAmountRequestBody() {
  var result = {};
  copyIfExists(this.__attrs, result, 'amount', 'requestBody');
  return result;
};

ChargeRequestWithAmount.prototype.queryParams = function chargeRequestWithAmountQueryParams() {
  var result = {};
  return result;
};

ChargeRequestWithAmount.prototype.toString = ChargeRequestWithAmount.prototype.inspect = function chargeRequestWithAmountToString() {
  return '[ChargeRequestWithAmount\n' +
  '  id: ' + stringifyField(this.__attrs['id']) + '\n' +
  '  amount: ' + stringifyField(this.__attrs['amount']) + '\n' +
  ']';
};


ChargeRequestWithAmount.create = function createChargeRequestWithAmount(params) {
  if (params === null || params === undefined) {
    return noConversionError('ChargeRequestWithAmount', params);
  }
  if (params instanceof ChargeRequestWithAmount) {
    return params;
  }

  if (_.isObject(params) && params instanceof ChargeResponse) { return new ChargeRequestWithAmount({'id': params.id}); }
  if (_.isString(params)) { return new ChargeRequestWithAmount({'id': params}); }
  if (_.isPlainObject(params)) { return new ChargeRequestWithAmount(params); }
  return noConversionError('ChargeRequestWithAmount', params);
};
module.exports.ChargeRequestWithAmount = ChargeRequestWithAmount;

function CreatedRange(params) {
  params = normalize(this.fields, params);
  Object.defineProperty(this, '__attrs', { value: params });
}

CreatedRange.prototype.fields = ['gt', 'gte', 'lt', 'lte'];

Object.defineProperty(CreatedRange.prototype, 'gt', {
  get: function() { return this.__attrs['gt']; },

  set: function(value) {
    this.__attrs['gt'] = value;
  },
  configurable: false,
  enumerable: true
});

Object.defineProperty(CreatedRange.prototype, 'gte', {
  get: function() { return this.__attrs['gte']; },

  set: function(value) {
    this.__attrs['gte'] = value;
  },
  configurable: false,
  enumerable: true
});

Object.defineProperty(CreatedRange.prototype, 'lt', {
  get: function() { return this.__attrs['lt']; },

  set: function(value) {
    this.__attrs['lt'] = value;
  },
  configurable: false,
  enumerable: true
});

Object.defineProperty(CreatedRange.prototype, 'lte', {
  get: function() { return this.__attrs['lte']; },

  set: function(value) {
    this.__attrs['lte'] = value;
  },
  configurable: false,
  enumerable: true
});

CreatedRange.prototype.requestBody = function createdRangeRequestBody() {
  var result = {};
  return result;
};

CreatedRange.prototype.queryParams = function createdRangeQueryParams() {
  var result = {};
  copyIfExists(this.__attrs, result, 'gt', 'queryParams');
  copyIfExists(this.__attrs, result, 'gte', 'queryParams');
  copyIfExists(this.__attrs, result, 'lt', 'queryParams');
  copyIfExists(this.__attrs, result, 'lte', 'queryParams');
  return result;
};

CreatedRange.prototype.toString = CreatedRange.prototype.inspect = function createdRangeToString() {
  return '[CreatedRange\n' +
  '  gt: ' + stringifyField(this.__attrs['gt']) + '\n' +
  '  gte: ' + stringifyField(this.__attrs['gte']) + '\n' +
  '  lt: ' + stringifyField(this.__attrs['lt']) + '\n' +
  '  lte: ' + stringifyField(this.__attrs['lte']) + '\n' +
  ']';
};


CreatedRange.create = function createCreatedRange(params) {
  if (params === null || params === undefined) {
    return noConversionError('CreatedRange', params);
  }
  if (params instanceof CreatedRange) {
    return params;
  }

  if (_.isPlainObject(params)) { return new CreatedRange(params); }
  return noConversionError('CreatedRange', params);
};
module.exports.CreatedRange = CreatedRange;

function ChargeListRequest(params) {
  params = normalize(this.fields, params);
  params['created'] = _.isObject(params['created']) ? new CreatedRange(params['created']) : params['created'];
  Object.defineProperty(this, '__attrs', { value: params });
}

ChargeListRequest.prototype.fields = ['count', 'offset', 'created', 'customer', 'recursion', 'shop'];

Object.defineProperty(ChargeListRequest.prototype, 'count', {
  get: function() { return this.__attrs['count']; },

  set: function(value) {
    this.__attrs['count'] = value;
  },
  configurable: false,
  enumerable: true
});

Object.defineProperty(ChargeListRequest.prototype, 'offset', {
  get: function() { return this.__attrs['offset']; },

  set: function(value) {
    this.__attrs['offset'] = value;
  },
  configurable: false,
  enumerable: true
});

Object.defineProperty(ChargeListRequest.prototype, 'created', {
  get: function() { return this.__attrs['created']; },

  set: function(value) {
    value = _.isObject(value) ? new CreatedRange(value) : value;
    this.__attrs['created'] = value;
  },
  configurable: false,
  enumerable: true
});

Object.defineProperty(ChargeListRequest.prototype, 'customer', {
  get: function() { return this.__attrs['customer']; },

  set: function(value) {
    this.__attrs['customer'] = value;
  },
  configurable: false,
  enumerable: true
});

Object.defineProperty(ChargeListRequest.prototype, 'recursion', {
  get: function() { return this.__attrs['recursion']; },

  set: function(value) {
    this.__attrs['recursion'] = value;
  },
  configurable: false,
  enumerable: true
});

Object.defineProperty(ChargeListRequest.prototype, 'shop', {
  get: function() { return this.__attrs['shop']; },

  set: function(value) {
    this.__attrs['shop'] = value;
  },
  configurable: false,
  enumerable: true
});

ChargeListRequest.prototype.requestBody = function chargeListRequestRequestBody() {
  var result = {};
  return result;
};

ChargeListRequest.prototype.queryParams = function chargeListRequestQueryParams() {
  var result = {};
  copyIfExists(this.__attrs, result, 'count', 'queryParams');
  copyIfExists(this.__attrs, result, 'offset', 'queryParams');
  copyIfExists(this.__attrs, result, 'created', 'queryParams');
  copyIfExists(this.__attrs, result, 'customer', 'queryParams');
  copyIfExists(this.__attrs, result, 'recursion', 'queryParams');
  copyIfExists(this.__attrs, result, 'shop', 'queryParams');
  return result;
};

ChargeListRequest.prototype.toString = ChargeListRequest.prototype.inspect = function chargeListRequestToString() {
  return '[ChargeListRequest\n' +
  '  count: ' + stringifyField(this.__attrs['count']) + '\n' +
  '  offset: ' + stringifyField(this.__attrs['offset']) + '\n' +
  '  created: ' + stringifyField(this.__attrs['created']) + '\n' +
  '  customer: ' + stringifyField(this.__attrs['customer']) + '\n' +
  '  recursion: ' + stringifyField(this.__attrs['recursion']) + '\n' +
  '  shop: ' + stringifyField(this.__attrs['shop']) + '\n' +
  ']';
};


ChargeListRequest.create = function createChargeListRequest(params) {
  if (params === null || params === undefined) {
    return noConversionError('ChargeListRequest', params);
  }
  if (params instanceof ChargeListRequest) {
    return params;
  }

  if (_.isPlainObject(params)) { return new ChargeListRequest(params); }
  return noConversionError('ChargeListRequest', params);
};
module.exports.ChargeListRequest = ChargeListRequest;

function ChargeResponseList(params) {
  params = normalize(this.fields, params);
  params['data'] = _.isArray(params['data']) ? params['data'].map(function (x) { return _.isObject(x) ? new ChargeResponse(x) : x; }) : params['data'];
  Object.defineProperty(this, '__attrs', { value: params });
}

ChargeResponseList.prototype.fields = ['object', 'url', 'count', 'data'];

Object.defineProperty(ChargeResponseList.prototype, 'object', {
  get: function() { return this.__attrs['object']; },
  configurable: false,
  enumerable: true
});

Object.defineProperty(ChargeResponseList.prototype, 'url', {
  get: function() { return this.__attrs['url']; },
  configurable: false,
  enumerable: true
});

Object.defineProperty(ChargeResponseList.prototype, 'count', {
  get: function() { return this.__attrs['count']; },
  configurable: false,
  enumerable: true
});

Object.defineProperty(ChargeResponseList.prototype, 'data', {
  get: function() { return this.__attrs['data']; },
  configurable: false,
  enumerable: true
});

ChargeResponseList.prototype.requestBody = function chargeResponseListRequestBody() {
  var result = {};
  copyIfExists(this.__attrs, result, 'object', 'requestBody');
  copyIfExists(this.__attrs, result, 'url', 'requestBody');
  copyIfExists(this.__attrs, result, 'count', 'requestBody');
  copyIfExists(this.__attrs, result, 'data', 'requestBody');
  return result;
};

ChargeResponseList.prototype.queryParams = function chargeResponseListQueryParams() {
  var result = {};
  return result;
};

ChargeResponseList.prototype.toString = ChargeResponseList.prototype.inspect = function chargeResponseListToString() {
  return '[ChargeResponseList\n' +
  '  object: ' + stringifyField(this.__attrs['object']) + '\n' +
  '  url: ' + stringifyField(this.__attrs['url']) + '\n' +
  '  count: ' + stringifyField(this.__attrs['count']) + '\n' +
  '  data: ' + stringifyField(this.__attrs['data']) + '\n' +
  ']';
};

module.exports.ChargeResponseList = ChargeResponseList;

function CustomerRequestCreate(params) {
  params = normalize(this.fields, params);
  params['card'] = _.isObject(params['card']) ? new CardRequest(params['card']) : params['card'];
  Object.defineProperty(this, '__attrs', { value: params });
}

CustomerRequestCreate.prototype.fields = ['card', 'description', 'email', 'uuid'];

Object.defineProperty(CustomerRequestCreate.prototype, 'card', {
  get: function() { return this.__attrs['card']; },

  set: function(value) {
    value = _.isObject(value) ? new CardRequest(value) : value;
    this.__attrs['card'] = value;
  },
  configurable: false,
  enumerable: true
});

Object.defineProperty(CustomerRequestCreate.prototype, 'description', {
  get: function() { return this.__attrs['description']; },

  set: function(value) {
    this.__attrs['description'] = value;
  },
  configurable: false,
  enumerable: true
});

Object.defineProperty(CustomerRequestCreate.prototype, 'email', {
  get: function() { return this.__attrs['email']; },

  set: function(value) {
    this.__attrs['email'] = value;
  },
  configurable: false,
  enumerable: true
});

Object.defineProperty(CustomerRequestCreate.prototype, 'uuid', {
  get: function() { return this.__attrs['uuid']; },

  set: function(value) {
    this.__attrs['uuid'] = value;
  },
  configurable: false,
  enumerable: true
});

CustomerRequestCreate.prototype.requestBody = function customerRequestCreateRequestBody() {
  var result = {};
  copyIfExists(this.__attrs, result, 'card', 'requestBody');
  copyIfExists(this.__attrs, result, 'description', 'requestBody');
  copyIfExists(this.__attrs, result, 'email', 'requestBody');
  copyIfExists(this.__attrs, result, 'uuid', 'requestBody');
  return result;
};

CustomerRequestCreate.prototype.queryParams = function customerRequestCreateQueryParams() {
  var result = {};
  return result;
};

CustomerRequestCreate.prototype.toString = CustomerRequestCreate.prototype.inspect = function customerRequestCreateToString() {
  return '[CustomerRequestCreate\n' +
  '  card: ' + stringifyField(this.__attrs['card']) + '\n' +
  '  description: ' + stringifyField(this.__attrs['description']) + '\n' +
  '  email: ' + stringifyField(this.__attrs['email']) + '\n' +
  '  uuid: ' + stringifyField(this.__attrs['uuid']) + '\n' +
  ']';
};


CustomerRequestCreate.create = function createCustomerRequestCreate(params) {
  if (params === null || params === undefined) {
    return noConversionError('CustomerRequestCreate', params);
  }
  if (params instanceof CustomerRequestCreate) {
    return params;
  }

  if (_.isPlainObject(params)) { return new CustomerRequestCreate(params); }
  return noConversionError('CustomerRequestCreate', params);
};
module.exports.CustomerRequestCreate = CustomerRequestCreate;

function RecursionResponse(params) {
  params = normalize(this.fields, params);
  if (isIgnored(params['deleted'])) {
    params['deleted'] = false;
  }
  Object.defineProperty(this, '__attrs', { value: params });
}

RecursionResponse.prototype.fields = ['id', 'object', 'livemode', 'created', 'amount', 'currency', 'period', 'description', 'customer', 'shop', 'last_executed', 'next_scheduled', 'status', 'deleted'];

Object.defineProperty(RecursionResponse.prototype, 'id', {
  get: function() { return this.__attrs['id']; },
  configurable: false,
  enumerable: true
});

Object.defineProperty(RecursionResponse.prototype, 'object', {
  get: function() { return this.__attrs['object']; },
  configurable: false,
  enumerable: true
});

Object.defineProperty(RecursionResponse.prototype, 'livemode', {
  get: function() { return this.__attrs['livemode']; },
  configurable: false,
  enumerable: true
});

Object.defineProperty(RecursionResponse.prototype, 'created', {
  get: function() { return this.__attrs['created']; },
  configurable: false,
  enumerable: true
});

Object.defineProperty(RecursionResponse.prototype, 'amount', {
  get: function() { return this.__attrs['amount']; },
  configurable: false,
  enumerable: true
});

Object.defineProperty(RecursionResponse.prototype, 'currency', {
  get: function() { return this.__attrs['currency']; },
  configurable: false,
  enumerable: true
});

Object.defineProperty(RecursionResponse.prototype, 'period', {
  get: function() { return this.__attrs['period']; },
  configurable: false,
  enumerable: true
});

Object.defineProperty(RecursionResponse.prototype, 'description', {
  get: function() { return this.__attrs['description']; },
  configurable: false,
  enumerable: true
});

Object.defineProperty(RecursionResponse.prototype, 'customer', {
  get: function() { return this.__attrs['customer']; },
  configurable: false,
  enumerable: true
});

Object.defineProperty(RecursionResponse.prototype, 'shop', {
  get: function() { return this.__attrs['shop']; },
  configurable: false,
  enumerable: true
});

Object.defineProperty(RecursionResponse.prototype, 'lastExecuted', {
  get: function() { return this.__attrs['last_executed']; },
  configurable: false,
  enumerable: true
});

Object.defineProperty(RecursionResponse.prototype, 'nextScheduled', {
  get: function() { return this.__attrs['next_scheduled']; },
  configurable: false,
  enumerable: true
});

Object.defineProperty(RecursionResponse.prototype, 'status', {
  get: function() { return this.__attrs['status']; },
  configurable: false,
  enumerable: true
});

Object.defineProperty(RecursionResponse.prototype, 'deleted', {
  get: function() { return this.__attrs['deleted']; },
  configurable: false,
  enumerable: true
});

RecursionResponse.prototype.requestBody = function recursionResponseRequestBody() {
  var result = {};
  copyIfExists(this.__attrs, result, 'id', 'requestBody');
  copyIfExists(this.__attrs, result, 'object', 'requestBody');
  copyIfExists(this.__attrs, result, 'livemode', 'requestBody');
  copyIfExists(this.__attrs, result, 'created', 'requestBody');
  copyIfExists(this.__attrs, result, 'amount', 'requestBody');
  copyIfExists(this.__attrs, result, 'currency', 'requestBody');
  copyIfExists(this.__attrs, result, 'period', 'requestBody');
  copyIfExists(this.__attrs, result, 'description', 'requestBody');
  copyIfExists(this.__attrs, result, 'customer', 'requestBody');
  copyIfExists(this.__attrs, result, 'shop', 'requestBody');
  copyIfExists(this.__attrs, result, 'last_executed', 'requestBody');
  copyIfExists(this.__attrs, result, 'next_scheduled', 'requestBody');
  copyIfExists(this.__attrs, result, 'status', 'requestBody');
  copyIfExists(this.__attrs, result, 'deleted', 'requestBody');
  return result;
};

RecursionResponse.prototype.queryParams = function recursionResponseQueryParams() {
  var result = {};
  return result;
};

RecursionResponse.prototype.toString = RecursionResponse.prototype.inspect = function recursionResponseToString() {
  return '[RecursionResponse\n' +
  '  id: ' + stringifyField(this.__attrs['id']) + '\n' +
  '  object: ' + stringifyField(this.__attrs['object']) + '\n' +
  '  livemode: ' + stringifyField(this.__attrs['livemode']) + '\n' +
  '  created: ' + stringifyField(this.__attrs['created']) + '\n' +
  '  amount: ' + stringifyField(this.__attrs['amount']) + '\n' +
  '  currency: ' + stringifyField(this.__attrs['currency']) + '\n' +
  '  period: ' + stringifyField(this.__attrs['period']) + '\n' +
  '  description: ' + stringifyField(this.__attrs['description']) + '\n' +
  '  customer: ' + stringifyField(this.__attrs['customer']) + '\n' +
  '  shop: ' + stringifyField(this.__attrs['shop']) + '\n' +
  '  lastExecuted: ' + stringifyField(this.__attrs['last_executed']) + '\n' +
  '  nextScheduled: ' + stringifyField(this.__attrs['next_scheduled']) + '\n' +
  '  status: ' + stringifyField(this.__attrs['status']) + '\n' +
  '  deleted: ' + stringifyField(this.__attrs['deleted']) + '\n' +
  ']';
};

module.exports.RecursionResponse = RecursionResponse;

function CustomerResponse(params) {
  params = normalize(this.fields, params);
  params['active_card'] = _.isObject(params['active_card']) ? new CardResponse(params['active_card']) : params['active_card'];
  params['recursions'] = _.isArray(params['recursions']) ? params['recursions'].map(function (x) { return _.isObject(x) ? new RecursionResponse(x) : x; }) : params['recursions'];
  if (isIgnored(params['deleted'])) {
    params['deleted'] = false;
  }
  Object.defineProperty(this, '__attrs', { value: params });
}

CustomerResponse.prototype.fields = ['id', 'object', 'livemode', 'created', 'active_card', 'description', 'email', 'recursions', 'deleted'];

Object.defineProperty(CustomerResponse.prototype, 'id', {
  get: function() { return this.__attrs['id']; },
  configurable: false,
  enumerable: true
});

Object.defineProperty(CustomerResponse.prototype, 'object', {
  get: function() { return this.__attrs['object']; },
  configurable: false,
  enumerable: true
});

Object.defineProperty(CustomerResponse.prototype, 'livemode', {
  get: function() { return this.__attrs['livemode']; },
  configurable: false,
  enumerable: true
});

Object.defineProperty(CustomerResponse.prototype, 'created', {
  get: function() { return this.__attrs['created']; },
  configurable: false,
  enumerable: true
});

Object.defineProperty(CustomerResponse.prototype, 'activeCard', {
  get: function() { return this.__attrs['active_card']; },
  configurable: false,
  enumerable: true
});

Object.defineProperty(CustomerResponse.prototype, 'description', {
  get: function() { return this.__attrs['description']; },
  configurable: false,
  enumerable: true
});

Object.defineProperty(CustomerResponse.prototype, 'email', {
  get: function() { return this.__attrs['email']; },
  configurable: false,
  enumerable: true
});

Object.defineProperty(CustomerResponse.prototype, 'recursions', {
  get: function() { return this.__attrs['recursions']; },
  configurable: false,
  enumerable: true
});

Object.defineProperty(CustomerResponse.prototype, 'deleted', {
  get: function() { return this.__attrs['deleted']; },
  configurable: false,
  enumerable: true
});

CustomerResponse.prototype.requestBody = function customerResponseRequestBody() {
  var result = {};
  copyIfExists(this.__attrs, result, 'id', 'requestBody');
  copyIfExists(this.__attrs, result, 'object', 'requestBody');
  copyIfExists(this.__attrs, result, 'livemode', 'requestBody');
  copyIfExists(this.__attrs, result, 'created', 'requestBody');
  copyIfExists(this.__attrs, result, 'active_card', 'requestBody');
  copyIfExists(this.__attrs, result, 'description', 'requestBody');
  copyIfExists(this.__attrs, result, 'email', 'requestBody');
  copyIfExists(this.__attrs, result, 'recursions', 'requestBody');
  copyIfExists(this.__attrs, result, 'deleted', 'requestBody');
  return result;
};

CustomerResponse.prototype.queryParams = function customerResponseQueryParams() {
  var result = {};
  return result;
};

CustomerResponse.prototype.toString = CustomerResponse.prototype.inspect = function customerResponseToString() {
  return '[CustomerResponse\n' +
  '  id: ' + stringifyField(this.__attrs['id']) + '\n' +
  '  object: ' + stringifyField(this.__attrs['object']) + '\n' +
  '  livemode: ' + stringifyField(this.__attrs['livemode']) + '\n' +
  '  created: ' + stringifyField(this.__attrs['created']) + '\n' +
  '  activeCard: ' + stringifyField(this.__attrs['active_card']) + '\n' +
  '  description: ' + stringifyField(this.__attrs['description']) + '\n' +
  '  email: ' + stringifyField(this.__attrs['email']) + '\n' +
  '  recursions: ' + stringifyField(this.__attrs['recursions']) + '\n' +
  '  deleted: ' + stringifyField(this.__attrs['deleted']) + '\n' +
  ']';
};

module.exports.CustomerResponse = CustomerResponse;

function CustomerIdRequest(params) {
  params = normalize(this.fields, params);
  Object.defineProperty(this, '__attrs', { value: params });
}

CustomerIdRequest.prototype.fields = ['id'];

Object.defineProperty(CustomerIdRequest.prototype, 'id', {
  get: function() { return this.__attrs['id']; },

  set: function(value) {
    this.__attrs['id'] = value;
  },
  configurable: false,
  enumerable: true
});

CustomerIdRequest.prototype.requestBody = function customerIdRequestRequestBody() {
  var result = {};
  return result;
};

CustomerIdRequest.prototype.queryParams = function customerIdRequestQueryParams() {
  var result = {};
  return result;
};

CustomerIdRequest.prototype.toString = CustomerIdRequest.prototype.inspect = function customerIdRequestToString() {
  return '[CustomerIdRequest\n' +
  '  id: ' + stringifyField(this.__attrs['id']) + '\n' +
  ']';
};


CustomerIdRequest.create = function createCustomerIdRequest(params) {
  if (params === null || params === undefined) {
    return noConversionError('CustomerIdRequest', params);
  }
  if (params instanceof CustomerIdRequest) {
    return params;
  }

  if (_.isObject(params) && params instanceof CustomerResponse) { return new CustomerIdRequest({'id': params.id}); }
  if (_.isString(params)) { return new CustomerIdRequest({'id': params}); }
  if (_.isPlainObject(params)) { return new CustomerIdRequest(params); }
  return noConversionError('CustomerIdRequest', params);
};
module.exports.CustomerIdRequest = CustomerIdRequest;

function CustomerRequestUpdate(params) {
  params = normalize(this.fields, params);
  params['card'] = _.isObject(params['card']) ? new CardRequest(params['card']) : params['card'];
  Object.defineProperty(this, '__attrs', { value: params });
}

CustomerRequestUpdate.prototype.fields = ['id', 'card', 'description', 'email'];

Object.defineProperty(CustomerRequestUpdate.prototype, 'id', {
  get: function() { return this.__attrs['id']; },

  set: function(value) {
    this.__attrs['id'] = value;
  },
  configurable: false,
  enumerable: true
});

Object.defineProperty(CustomerRequestUpdate.prototype, 'card', {
  get: function() { return this.__attrs['card']; },

  set: function(value) {
    value = _.isObject(value) ? new CardRequest(value) : value;
    this.__attrs['card'] = value;
  },
  configurable: false,
  enumerable: true
});

Object.defineProperty(CustomerRequestUpdate.prototype, 'description', {
  get: function() { return this.__attrs['description']; },

  set: function(value) {
    this.__attrs['description'] = value;
  },
  configurable: false,
  enumerable: true
});

Object.defineProperty(CustomerRequestUpdate.prototype, 'email', {
  get: function() { return this.__attrs['email']; },

  set: function(value) {
    this.__attrs['email'] = value;
  },
  configurable: false,
  enumerable: true
});

CustomerRequestUpdate.prototype.requestBody = function customerRequestUpdateRequestBody() {
  var result = {};
  copyIfExists(this.__attrs, result, 'card', 'requestBody');
  copyIfExists(this.__attrs, result, 'description', 'requestBody');
  copyIfExists(this.__attrs, result, 'email', 'requestBody');
  return result;
};

CustomerRequestUpdate.prototype.queryParams = function customerRequestUpdateQueryParams() {
  var result = {};
  return result;
};

CustomerRequestUpdate.prototype.toString = CustomerRequestUpdate.prototype.inspect = function customerRequestUpdateToString() {
  return '[CustomerRequestUpdate\n' +
  '  id: ' + stringifyField(this.__attrs['id']) + '\n' +
  '  card: ' + stringifyField(this.__attrs['card']) + '\n' +
  '  description: ' + stringifyField(this.__attrs['description']) + '\n' +
  '  email: ' + stringifyField(this.__attrs['email']) + '\n' +
  ']';
};


CustomerRequestUpdate.create = function createCustomerRequestUpdate(params) {
  if (params === null || params === undefined) {
    return noConversionError('CustomerRequestUpdate', params);
  }
  if (params instanceof CustomerRequestUpdate) {
    return params;
  }

  if (_.isObject(params) && params instanceof CustomerResponse) { return new CustomerRequestUpdate({'id': params.id}); }
  if (_.isString(params)) { return new CustomerRequestUpdate({'id': params}); }
  if (_.isPlainObject(params)) { return new CustomerRequestUpdate(params); }
  return noConversionError('CustomerRequestUpdate', params);
};
module.exports.CustomerRequestUpdate = CustomerRequestUpdate;

function BasicListRequest(params) {
  params = normalize(this.fields, params);
  params['created'] = _.isObject(params['created']) ? new CreatedRange(params['created']) : params['created'];
  Object.defineProperty(this, '__attrs', { value: params });
}

BasicListRequest.prototype.fields = ['count', 'offset', 'created'];

Object.defineProperty(BasicListRequest.prototype, 'count', {
  get: function() { return this.__attrs['count']; },

  set: function(value) {
    this.__attrs['count'] = value;
  },
  configurable: false,
  enumerable: true
});

Object.defineProperty(BasicListRequest.prototype, 'offset', {
  get: function() { return this.__attrs['offset']; },

  set: function(value) {
    this.__attrs['offset'] = value;
  },
  configurable: false,
  enumerable: true
});

Object.defineProperty(BasicListRequest.prototype, 'created', {
  get: function() { return this.__attrs['created']; },

  set: function(value) {
    value = _.isObject(value) ? new CreatedRange(value) : value;
    this.__attrs['created'] = value;
  },
  configurable: false,
  enumerable: true
});

BasicListRequest.prototype.requestBody = function basicListRequestRequestBody() {
  var result = {};
  return result;
};

BasicListRequest.prototype.queryParams = function basicListRequestQueryParams() {
  var result = {};
  copyIfExists(this.__attrs, result, 'count', 'queryParams');
  copyIfExists(this.__attrs, result, 'offset', 'queryParams');
  copyIfExists(this.__attrs, result, 'created', 'queryParams');
  return result;
};

BasicListRequest.prototype.toString = BasicListRequest.prototype.inspect = function basicListRequestToString() {
  return '[BasicListRequest\n' +
  '  count: ' + stringifyField(this.__attrs['count']) + '\n' +
  '  offset: ' + stringifyField(this.__attrs['offset']) + '\n' +
  '  created: ' + stringifyField(this.__attrs['created']) + '\n' +
  ']';
};


BasicListRequest.create = function createBasicListRequest(params) {
  if (params === null || params === undefined) {
    return noConversionError('BasicListRequest', params);
  }
  if (params instanceof BasicListRequest) {
    return params;
  }

  if (_.isPlainObject(params)) { return new BasicListRequest(params); }
  return noConversionError('BasicListRequest', params);
};
module.exports.BasicListRequest = BasicListRequest;

function CustomerResponseList(params) {
  params = normalize(this.fields, params);
  params['data'] = _.isArray(params['data']) ? params['data'].map(function (x) { return _.isObject(x) ? new CustomerResponse(x) : x; }) : params['data'];
  Object.defineProperty(this, '__attrs', { value: params });
}

CustomerResponseList.prototype.fields = ['object', 'url', 'count', 'data'];

Object.defineProperty(CustomerResponseList.prototype, 'object', {
  get: function() { return this.__attrs['object']; },
  configurable: false,
  enumerable: true
});

Object.defineProperty(CustomerResponseList.prototype, 'url', {
  get: function() { return this.__attrs['url']; },
  configurable: false,
  enumerable: true
});

Object.defineProperty(CustomerResponseList.prototype, 'count', {
  get: function() { return this.__attrs['count']; },
  configurable: false,
  enumerable: true
});

Object.defineProperty(CustomerResponseList.prototype, 'data', {
  get: function() { return this.__attrs['data']; },
  configurable: false,
  enumerable: true
});

CustomerResponseList.prototype.requestBody = function customerResponseListRequestBody() {
  var result = {};
  copyIfExists(this.__attrs, result, 'object', 'requestBody');
  copyIfExists(this.__attrs, result, 'url', 'requestBody');
  copyIfExists(this.__attrs, result, 'count', 'requestBody');
  copyIfExists(this.__attrs, result, 'data', 'requestBody');
  return result;
};

CustomerResponseList.prototype.queryParams = function customerResponseListQueryParams() {
  var result = {};
  return result;
};

CustomerResponseList.prototype.toString = CustomerResponseList.prototype.inspect = function customerResponseListToString() {
  return '[CustomerResponseList\n' +
  '  object: ' + stringifyField(this.__attrs['object']) + '\n' +
  '  url: ' + stringifyField(this.__attrs['url']) + '\n' +
  '  count: ' + stringifyField(this.__attrs['count']) + '\n' +
  '  data: ' + stringifyField(this.__attrs['data']) + '\n' +
  ']';
};

module.exports.CustomerResponseList = CustomerResponseList;

function TokenRequestCreate(params) {
  params = normalize(this.fields, params);
  params['card'] = _.isObject(params['card']) ? new CardRequest(params['card']) : params['card'];
  Object.defineProperty(this, '__attrs', { value: params });
}

TokenRequestCreate.prototype.fields = ['card', 'uuid'];

Object.defineProperty(TokenRequestCreate.prototype, 'card', {
  get: function() { return this.__attrs['card']; },

  set: function(value) {
    value = _.isObject(value) ? new CardRequest(value) : value;
    this.__attrs['card'] = value;
  },
  configurable: false,
  enumerable: true
});

Object.defineProperty(TokenRequestCreate.prototype, 'uuid', {
  get: function() { return this.__attrs['uuid']; },

  set: function(value) {
    this.__attrs['uuid'] = value;
  },
  configurable: false,
  enumerable: true
});

TokenRequestCreate.prototype.requestBody = function tokenRequestCreateRequestBody() {
  var result = {};
  copyIfExists(this.__attrs, result, 'card', 'requestBody');
  copyIfExists(this.__attrs, result, 'uuid', 'requestBody');
  return result;
};

TokenRequestCreate.prototype.queryParams = function tokenRequestCreateQueryParams() {
  var result = {};
  return result;
};

TokenRequestCreate.prototype.toString = TokenRequestCreate.prototype.inspect = function tokenRequestCreateToString() {
  return '[TokenRequestCreate\n' +
  '  card: ' + stringifyField(this.__attrs['card']) + '\n' +
  '  uuid: ' + stringifyField(this.__attrs['uuid']) + '\n' +
  ']';
};


TokenRequestCreate.create = function createTokenRequestCreate(params) {
  if (params === null || params === undefined) {
    return noConversionError('TokenRequestCreate', params);
  }
  if (params instanceof TokenRequestCreate) {
    return params;
  }

  if (_.isObject(params) && params instanceof CardRequest) { return new TokenRequestCreate({'card': params}); }
  if (_.isPlainObject(params)) { return new TokenRequestCreate(params); }
  return noConversionError('TokenRequestCreate', params);
};
module.exports.TokenRequestCreate = TokenRequestCreate;

function TokenResponse(params) {
  params = normalize(this.fields, params);
  params['card'] = _.isObject(params['card']) ? new CardResponse(params['card']) : params['card'];
  Object.defineProperty(this, '__attrs', { value: params });
}

TokenResponse.prototype.fields = ['id', 'object', 'livemode', 'card', 'created', 'used'];

Object.defineProperty(TokenResponse.prototype, 'id', {
  get: function() { return this.__attrs['id']; },
  configurable: false,
  enumerable: true
});

Object.defineProperty(TokenResponse.prototype, 'object', {
  get: function() { return this.__attrs['object']; },
  configurable: false,
  enumerable: true
});

Object.defineProperty(TokenResponse.prototype, 'livemode', {
  get: function() { return this.__attrs['livemode']; },
  configurable: false,
  enumerable: true
});

Object.defineProperty(TokenResponse.prototype, 'card', {
  get: function() { return this.__attrs['card']; },
  configurable: false,
  enumerable: true
});

Object.defineProperty(TokenResponse.prototype, 'created', {
  get: function() { return this.__attrs['created']; },
  configurable: false,
  enumerable: true
});

Object.defineProperty(TokenResponse.prototype, 'used', {
  get: function() { return this.__attrs['used']; },
  configurable: false,
  enumerable: true
});

TokenResponse.prototype.requestBody = function tokenResponseRequestBody() {
  var result = {};
  copyIfExists(this.__attrs, result, 'id', 'requestBody');
  copyIfExists(this.__attrs, result, 'object', 'requestBody');
  copyIfExists(this.__attrs, result, 'livemode', 'requestBody');
  copyIfExists(this.__attrs, result, 'card', 'requestBody');
  copyIfExists(this.__attrs, result, 'created', 'requestBody');
  copyIfExists(this.__attrs, result, 'used', 'requestBody');
  return result;
};

TokenResponse.prototype.queryParams = function tokenResponseQueryParams() {
  var result = {};
  return result;
};

TokenResponse.prototype.toString = TokenResponse.prototype.inspect = function tokenResponseToString() {
  return '[TokenResponse\n' +
  '  id: ' + stringifyField(this.__attrs['id']) + '\n' +
  '  object: ' + stringifyField(this.__attrs['object']) + '\n' +
  '  livemode: ' + stringifyField(this.__attrs['livemode']) + '\n' +
  '  card: ' + stringifyField(this.__attrs['card']) + '\n' +
  '  created: ' + stringifyField(this.__attrs['created']) + '\n' +
  '  used: ' + stringifyField(this.__attrs['used']) + '\n' +
  ']';
};

module.exports.TokenResponse = TokenResponse;

function TokenIdRequest(params) {
  params = normalize(this.fields, params);
  Object.defineProperty(this, '__attrs', { value: params });
}

TokenIdRequest.prototype.fields = ['id'];

Object.defineProperty(TokenIdRequest.prototype, 'id', {
  get: function() { return this.__attrs['id']; },

  set: function(value) {
    this.__attrs['id'] = value;
  },
  configurable: false,
  enumerable: true
});

TokenIdRequest.prototype.requestBody = function tokenIdRequestRequestBody() {
  var result = {};
  return result;
};

TokenIdRequest.prototype.queryParams = function tokenIdRequestQueryParams() {
  var result = {};
  return result;
};

TokenIdRequest.prototype.toString = TokenIdRequest.prototype.inspect = function tokenIdRequestToString() {
  return '[TokenIdRequest\n' +
  '  id: ' + stringifyField(this.__attrs['id']) + '\n' +
  ']';
};


TokenIdRequest.create = function createTokenIdRequest(params) {
  if (params === null || params === undefined) {
    return noConversionError('TokenIdRequest', params);
  }
  if (params instanceof TokenIdRequest) {
    return params;
  }

  if (_.isObject(params) && params instanceof TokenResponse) { return new TokenIdRequest({'id': params.id}); }
  if (_.isString(params)) { return new TokenIdRequest({'id': params}); }
  if (_.isPlainObject(params)) { return new TokenIdRequest(params); }
  return noConversionError('TokenIdRequest', params);
};
module.exports.TokenIdRequest = TokenIdRequest;

function EventIdRequest(params) {
  params = normalize(this.fields, params);
  Object.defineProperty(this, '__attrs', { value: params });
}

EventIdRequest.prototype.fields = ['id'];

Object.defineProperty(EventIdRequest.prototype, 'id', {
  get: function() { return this.__attrs['id']; },

  set: function(value) {
    this.__attrs['id'] = value;
  },
  configurable: false,
  enumerable: true
});

EventIdRequest.prototype.requestBody = function eventIdRequestRequestBody() {
  var result = {};
  return result;
};

EventIdRequest.prototype.queryParams = function eventIdRequestQueryParams() {
  var result = {};
  return result;
};

EventIdRequest.prototype.toString = EventIdRequest.prototype.inspect = function eventIdRequestToString() {
  return '[EventIdRequest\n' +
  '  id: ' + stringifyField(this.__attrs['id']) + '\n' +
  ']';
};


EventIdRequest.create = function createEventIdRequest(params) {
  if (params === null || params === undefined) {
    return noConversionError('EventIdRequest', params);
  }
  if (params instanceof EventIdRequest) {
    return params;
  }

  if (_.isObject(params) && params instanceof EventResponse) { return new EventIdRequest({'id': params.id}); }
  if (_.isString(params)) { return new EventIdRequest({'id': params}); }
  if (_.isPlainObject(params)) { return new EventIdRequest(params); }
  return noConversionError('EventIdRequest', params);
};
module.exports.EventIdRequest = EventIdRequest;

function EventData(params) {
  params = normalize(this.fields, params);
  if (!_.isPlainObject(params['object']) || !params['object'].object) {
  params['object'] = params['object'];
} else {
  switch (params['object'].object) {
    case 'charge':
      params['object'] = new ChargeResponse(params['object']);
      break;
    case 'customer':
      params['object'] = new CustomerResponse(params['object']);
      break;
    case 'shop':
      params['object'] = new ShopResponse(params['object']);
      break;
    case 'recursion':
      params['object'] = new RecursionResponse(params['object']);
      break;
    case 'account':
      params['object'] = new AccountResponse(params['object']);
      break;
    default:
      params['object'] = params['object'];
      break;
  }
}
  Object.defineProperty(this, '__attrs', { value: params });
}

EventData.prototype.fields = ['object', 'previous_attributes'];

Object.defineProperty(EventData.prototype, 'object', {
  get: function() { return this.__attrs['object']; },
  configurable: false,
  enumerable: true
});

Object.defineProperty(EventData.prototype, 'previousAttributes', {
  get: function() { return this.__attrs['previous_attributes']; },
  configurable: false,
  enumerable: true
});

EventData.prototype.requestBody = function eventDataRequestBody() {
  var result = {};
  copyIfExists(this.__attrs, result, 'object', 'requestBody');
  copyIfExists(this.__attrs, result, 'previous_attributes', 'requestBody');
  return result;
};

EventData.prototype.queryParams = function eventDataQueryParams() {
  var result = {};
  return result;
};

EventData.prototype.toString = EventData.prototype.inspect = function eventDataToString() {
  return '[EventData\n' +
  '  object: ' + stringifyField(this.__attrs['object']) + '\n' +
  '  previousAttributes: ' + stringifyField(this.__attrs['previous_attributes']) + '\n' +
  ']';
};

module.exports.EventData = EventData;

function EventResponse(params) {
  params = normalize(this.fields, params);
  params['data'] = _.isObject(params['data']) ? new EventData(params['data']) : params['data'];
  Object.defineProperty(this, '__attrs', { value: params });
}

EventResponse.prototype.fields = ['id', 'object', 'livemode', 'created', 'data', 'pending_webhooks', 'type', 'shop'];

Object.defineProperty(EventResponse.prototype, 'id', {
  get: function() { return this.__attrs['id']; },
  configurable: false,
  enumerable: true
});

Object.defineProperty(EventResponse.prototype, 'object', {
  get: function() { return this.__attrs['object']; },
  configurable: false,
  enumerable: true
});

Object.defineProperty(EventResponse.prototype, 'livemode', {
  get: function() { return this.__attrs['livemode']; },
  configurable: false,
  enumerable: true
});

Object.defineProperty(EventResponse.prototype, 'created', {
  get: function() { return this.__attrs['created']; },
  configurable: false,
  enumerable: true
});

Object.defineProperty(EventResponse.prototype, 'data', {
  get: function() { return this.__attrs['data']; },
  configurable: false,
  enumerable: true
});

Object.defineProperty(EventResponse.prototype, 'pendingWebhooks', {
  get: function() { return this.__attrs['pending_webhooks']; },
  configurable: false,
  enumerable: true
});

Object.defineProperty(EventResponse.prototype, 'type', {
  get: function() { return this.__attrs['type']; },
  configurable: false,
  enumerable: true
});

Object.defineProperty(EventResponse.prototype, 'shop', {
  get: function() { return this.__attrs['shop']; },
  configurable: false,
  enumerable: true
});

EventResponse.prototype.requestBody = function eventResponseRequestBody() {
  var result = {};
  copyIfExists(this.__attrs, result, 'id', 'requestBody');
  copyIfExists(this.__attrs, result, 'object', 'requestBody');
  copyIfExists(this.__attrs, result, 'livemode', 'requestBody');
  copyIfExists(this.__attrs, result, 'created', 'requestBody');
  copyIfExists(this.__attrs, result, 'data', 'requestBody');
  copyIfExists(this.__attrs, result, 'pending_webhooks', 'requestBody');
  copyIfExists(this.__attrs, result, 'type', 'requestBody');
  copyIfExists(this.__attrs, result, 'shop', 'requestBody');
  return result;
};

EventResponse.prototype.queryParams = function eventResponseQueryParams() {
  var result = {};
  return result;
};

EventResponse.prototype.toString = EventResponse.prototype.inspect = function eventResponseToString() {
  return '[EventResponse\n' +
  '  id: ' + stringifyField(this.__attrs['id']) + '\n' +
  '  object: ' + stringifyField(this.__attrs['object']) + '\n' +
  '  livemode: ' + stringifyField(this.__attrs['livemode']) + '\n' +
  '  created: ' + stringifyField(this.__attrs['created']) + '\n' +
  '  data: ' + stringifyField(this.__attrs['data']) + '\n' +
  '  pendingWebhooks: ' + stringifyField(this.__attrs['pending_webhooks']) + '\n' +
  '  type: ' + stringifyField(this.__attrs['type']) + '\n' +
  '  shop: ' + stringifyField(this.__attrs['shop']) + '\n' +
  ']';
};

module.exports.EventResponse = EventResponse;

function EventListRequest(params) {
  params = normalize(this.fields, params);
  params['created'] = _.isObject(params['created']) ? new CreatedRange(params['created']) : params['created'];
  Object.defineProperty(this, '__attrs', { value: params });
}

EventListRequest.prototype.fields = ['count', 'offset', 'created', 'type', 'shop'];

Object.defineProperty(EventListRequest.prototype, 'count', {
  get: function() { return this.__attrs['count']; },

  set: function(value) {
    this.__attrs['count'] = value;
  },
  configurable: false,
  enumerable: true
});

Object.defineProperty(EventListRequest.prototype, 'offset', {
  get: function() { return this.__attrs['offset']; },

  set: function(value) {
    this.__attrs['offset'] = value;
  },
  configurable: false,
  enumerable: true
});

Object.defineProperty(EventListRequest.prototype, 'created', {
  get: function() { return this.__attrs['created']; },

  set: function(value) {
    value = _.isObject(value) ? new CreatedRange(value) : value;
    this.__attrs['created'] = value;
  },
  configurable: false,
  enumerable: true
});

Object.defineProperty(EventListRequest.prototype, 'type', {
  get: function() { return this.__attrs['type']; },

  set: function(value) {
    this.__attrs['type'] = value;
  },
  configurable: false,
  enumerable: true
});

Object.defineProperty(EventListRequest.prototype, 'shop', {
  get: function() { return this.__attrs['shop']; },

  set: function(value) {
    this.__attrs['shop'] = value;
  },
  configurable: false,
  enumerable: true
});

EventListRequest.prototype.requestBody = function eventListRequestRequestBody() {
  var result = {};
  return result;
};

EventListRequest.prototype.queryParams = function eventListRequestQueryParams() {
  var result = {};
  copyIfExists(this.__attrs, result, 'count', 'queryParams');
  copyIfExists(this.__attrs, result, 'offset', 'queryParams');
  copyIfExists(this.__attrs, result, 'created', 'queryParams');
  copyIfExists(this.__attrs, result, 'type', 'queryParams');
  copyIfExists(this.__attrs, result, 'shop', 'queryParams');
  return result;
};

EventListRequest.prototype.toString = EventListRequest.prototype.inspect = function eventListRequestToString() {
  return '[EventListRequest\n' +
  '  count: ' + stringifyField(this.__attrs['count']) + '\n' +
  '  offset: ' + stringifyField(this.__attrs['offset']) + '\n' +
  '  created: ' + stringifyField(this.__attrs['created']) + '\n' +
  '  type: ' + stringifyField(this.__attrs['type']) + '\n' +
  '  shop: ' + stringifyField(this.__attrs['shop']) + '\n' +
  ']';
};


EventListRequest.create = function createEventListRequest(params) {
  if (params === null || params === undefined) {
    return noConversionError('EventListRequest', params);
  }
  if (params instanceof EventListRequest) {
    return params;
  }

  if (_.isPlainObject(params)) { return new EventListRequest(params); }
  return noConversionError('EventListRequest', params);
};
module.exports.EventListRequest = EventListRequest;

function EventResponseList(params) {
  params = normalize(this.fields, params);
  params['data'] = _.isArray(params['data']) ? params['data'].map(function (x) { return _.isObject(x) ? new EventResponse(x) : x; }) : params['data'];
  Object.defineProperty(this, '__attrs', { value: params });
}

EventResponseList.prototype.fields = ['object', 'url', 'count', 'data'];

Object.defineProperty(EventResponseList.prototype, 'object', {
  get: function() { return this.__attrs['object']; },
  configurable: false,
  enumerable: true
});

Object.defineProperty(EventResponseList.prototype, 'url', {
  get: function() { return this.__attrs['url']; },
  configurable: false,
  enumerable: true
});

Object.defineProperty(EventResponseList.prototype, 'count', {
  get: function() { return this.__attrs['count']; },
  configurable: false,
  enumerable: true
});

Object.defineProperty(EventResponseList.prototype, 'data', {
  get: function() { return this.__attrs['data']; },
  configurable: false,
  enumerable: true
});

EventResponseList.prototype.requestBody = function eventResponseListRequestBody() {
  var result = {};
  copyIfExists(this.__attrs, result, 'object', 'requestBody');
  copyIfExists(this.__attrs, result, 'url', 'requestBody');
  copyIfExists(this.__attrs, result, 'count', 'requestBody');
  copyIfExists(this.__attrs, result, 'data', 'requestBody');
  return result;
};

EventResponseList.prototype.queryParams = function eventResponseListQueryParams() {
  var result = {};
  return result;
};

EventResponseList.prototype.toString = EventResponseList.prototype.inspect = function eventResponseListToString() {
  return '[EventResponseList\n' +
  '  object: ' + stringifyField(this.__attrs['object']) + '\n' +
  '  url: ' + stringifyField(this.__attrs['url']) + '\n' +
  '  count: ' + stringifyField(this.__attrs['count']) + '\n' +
  '  data: ' + stringifyField(this.__attrs['data']) + '\n' +
  ']';
};

module.exports.EventResponseList = EventResponseList;

function ShopRequestCreate(params) {
  params = normalize(this.fields, params);
  Object.defineProperty(this, '__attrs', { value: params });
}

ShopRequestCreate.prototype.fields = ['description', 'details'];

Object.defineProperty(ShopRequestCreate.prototype, 'description', {
  get: function() { return this.__attrs['description']; },

  set: function(value) {
    this.__attrs['description'] = value;
  },
  configurable: false,
  enumerable: true
});

Object.defineProperty(ShopRequestCreate.prototype, 'details', {
  get: function() { return this.__attrs['details']; },

  set: function(value) {
    this.__attrs['details'] = value;
  },
  configurable: false,
  enumerable: true
});

ShopRequestCreate.prototype.requestBody = function shopRequestCreateRequestBody() {
  var result = {};
  copyIfExists(this.__attrs, result, 'description', 'requestBody');
  copyIfExists(this.__attrs, result, 'details', 'requestBody');
  return result;
};

ShopRequestCreate.prototype.queryParams = function shopRequestCreateQueryParams() {
  var result = {};
  return result;
};

ShopRequestCreate.prototype.toString = ShopRequestCreate.prototype.inspect = function shopRequestCreateToString() {
  return '[ShopRequestCreate\n' +
  '  description: ' + stringifyField(this.__attrs['description']) + '\n' +
  '  details: ' + stringifyField(this.__attrs['details']) + '\n' +
  ']';
};


ShopRequestCreate.create = function createShopRequestCreate(params) {
  if (params === null || params === undefined) {
    return noConversionError('ShopRequestCreate', params);
  }
  if (params instanceof ShopRequestCreate) {
    return params;
  }

  if (_.isPlainObject(params)) { return new ShopRequestCreate(params); }
  return noConversionError('ShopRequestCreate', params);
};
module.exports.ShopRequestCreate = ShopRequestCreate;

function ShopResponse(params) {
  params = normalize(this.fields, params);
  Object.defineProperty(this, '__attrs', { value: params });
}

ShopResponse.prototype.fields = ['id', 'object', 'livemode', 'status', 'description', 'access_key', 'created', 'statement_descriptor', 'card_types_supported', 'details'];

Object.defineProperty(ShopResponse.prototype, 'id', {
  get: function() { return this.__attrs['id']; },
  configurable: false,
  enumerable: true
});

Object.defineProperty(ShopResponse.prototype, 'object', {
  get: function() { return this.__attrs['object']; },
  configurable: false,
  enumerable: true
});

Object.defineProperty(ShopResponse.prototype, 'livemode', {
  get: function() { return this.__attrs['livemode']; },
  configurable: false,
  enumerable: true
});

Object.defineProperty(ShopResponse.prototype, 'status', {
  get: function() { return this.__attrs['status']; },
  configurable: false,
  enumerable: true
});

Object.defineProperty(ShopResponse.prototype, 'description', {
  get: function() { return this.__attrs['description']; },
  configurable: false,
  enumerable: true
});

Object.defineProperty(ShopResponse.prototype, 'accessKey', {
  get: function() { return this.__attrs['access_key']; },
  configurable: false,
  enumerable: true
});

Object.defineProperty(ShopResponse.prototype, 'created', {
  get: function() { return this.__attrs['created']; },
  configurable: false,
  enumerable: true
});

Object.defineProperty(ShopResponse.prototype, 'statementDescriptor', {
  get: function() { return this.__attrs['statement_descriptor']; },
  configurable: false,
  enumerable: true
});

Object.defineProperty(ShopResponse.prototype, 'cardTypesSupported', {
  get: function() { return this.__attrs['card_types_supported']; },
  configurable: false,
  enumerable: true
});

Object.defineProperty(ShopResponse.prototype, 'details', {
  get: function() { return this.__attrs['details']; },
  configurable: false,
  enumerable: true
});

ShopResponse.prototype.requestBody = function shopResponseRequestBody() {
  var result = {};
  copyIfExists(this.__attrs, result, 'id', 'requestBody');
  copyIfExists(this.__attrs, result, 'object', 'requestBody');
  copyIfExists(this.__attrs, result, 'livemode', 'requestBody');
  copyIfExists(this.__attrs, result, 'status', 'requestBody');
  copyIfExists(this.__attrs, result, 'description', 'requestBody');
  copyIfExists(this.__attrs, result, 'access_key', 'requestBody');
  copyIfExists(this.__attrs, result, 'created', 'requestBody');
  copyIfExists(this.__attrs, result, 'statement_descriptor', 'requestBody');
  copyIfExists(this.__attrs, result, 'card_types_supported', 'requestBody');
  copyIfExists(this.__attrs, result, 'details', 'requestBody');
  return result;
};

ShopResponse.prototype.queryParams = function shopResponseQueryParams() {
  var result = {};
  return result;
};

ShopResponse.prototype.toString = ShopResponse.prototype.inspect = function shopResponseToString() {
  return '[ShopResponse\n' +
  '  id: ' + stringifyField(this.__attrs['id']) + '\n' +
  '  object: ' + stringifyField(this.__attrs['object']) + '\n' +
  '  livemode: ' + stringifyField(this.__attrs['livemode']) + '\n' +
  '  status: ' + stringifyField(this.__attrs['status']) + '\n' +
  '  description: ' + stringifyField(this.__attrs['description']) + '\n' +
  '  accessKey: ' + stringifyField(this.__attrs['access_key']) + '\n' +
  '  created: ' + stringifyField(this.__attrs['created']) + '\n' +
  '  statementDescriptor: ' + stringifyField(this.__attrs['statement_descriptor']) + '\n' +
  '  cardTypesSupported: ' + stringifyField(this.__attrs['card_types_supported']) + '\n' +
  '  details: ' + stringifyField(this.__attrs['details']) + '\n' +
  ']';
};

module.exports.ShopResponse = ShopResponse;

function ShopIdRequest(params) {
  params = normalize(this.fields, params);
  Object.defineProperty(this, '__attrs', { value: params });
}

ShopIdRequest.prototype.fields = ['id'];

Object.defineProperty(ShopIdRequest.prototype, 'id', {
  get: function() { return this.__attrs['id']; },

  set: function(value) {
    this.__attrs['id'] = value;
  },
  configurable: false,
  enumerable: true
});

ShopIdRequest.prototype.requestBody = function shopIdRequestRequestBody() {
  var result = {};
  return result;
};

ShopIdRequest.prototype.queryParams = function shopIdRequestQueryParams() {
  var result = {};
  return result;
};

ShopIdRequest.prototype.toString = ShopIdRequest.prototype.inspect = function shopIdRequestToString() {
  return '[ShopIdRequest\n' +
  '  id: ' + stringifyField(this.__attrs['id']) + '\n' +
  ']';
};


ShopIdRequest.create = function createShopIdRequest(params) {
  if (params === null || params === undefined) {
    return noConversionError('ShopIdRequest', params);
  }
  if (params instanceof ShopIdRequest) {
    return params;
  }

  if (_.isObject(params) && params instanceof ShopResponse) { return new ShopIdRequest({'id': params.id}); }
  if (_.isString(params)) { return new ShopIdRequest({'id': params}); }
  if (_.isPlainObject(params)) { return new ShopIdRequest(params); }
  return noConversionError('ShopIdRequest', params);
};
module.exports.ShopIdRequest = ShopIdRequest;

function ShopRequestUpdate(params) {
  params = normalize(this.fields, params);
  Object.defineProperty(this, '__attrs', { value: params });
}

ShopRequestUpdate.prototype.fields = ['id', 'description', 'details'];

Object.defineProperty(ShopRequestUpdate.prototype, 'id', {
  get: function() { return this.__attrs['id']; },

  set: function(value) {
    this.__attrs['id'] = value;
  },
  configurable: false,
  enumerable: true
});

Object.defineProperty(ShopRequestUpdate.prototype, 'description', {
  get: function() { return this.__attrs['description']; },

  set: function(value) {
    this.__attrs['description'] = value;
  },
  configurable: false,
  enumerable: true
});

Object.defineProperty(ShopRequestUpdate.prototype, 'details', {
  get: function() { return this.__attrs['details']; },

  set: function(value) {
    this.__attrs['details'] = value;
  },
  configurable: false,
  enumerable: true
});

ShopRequestUpdate.prototype.requestBody = function shopRequestUpdateRequestBody() {
  var result = {};
  copyIfExists(this.__attrs, result, 'description', 'requestBody');
  copyIfExists(this.__attrs, result, 'details', 'requestBody');
  return result;
};

ShopRequestUpdate.prototype.queryParams = function shopRequestUpdateQueryParams() {
  var result = {};
  return result;
};

ShopRequestUpdate.prototype.toString = ShopRequestUpdate.prototype.inspect = function shopRequestUpdateToString() {
  return '[ShopRequestUpdate\n' +
  '  id: ' + stringifyField(this.__attrs['id']) + '\n' +
  '  description: ' + stringifyField(this.__attrs['description']) + '\n' +
  '  details: ' + stringifyField(this.__attrs['details']) + '\n' +
  ']';
};


ShopRequestUpdate.create = function createShopRequestUpdate(params) {
  if (params === null || params === undefined) {
    return noConversionError('ShopRequestUpdate', params);
  }
  if (params instanceof ShopRequestUpdate) {
    return params;
  }

  if (_.isObject(params) && params instanceof ShopResponse) { return new ShopRequestUpdate({'id': params.id}); }
  if (_.isString(params)) { return new ShopRequestUpdate({'id': params}); }
  if (_.isPlainObject(params)) { return new ShopRequestUpdate(params); }
  return noConversionError('ShopRequestUpdate', params);
};
module.exports.ShopRequestUpdate = ShopRequestUpdate;

function ShopResponseList(params) {
  params = normalize(this.fields, params);
  params['data'] = _.isArray(params['data']) ? params['data'].map(function (x) { return _.isObject(x) ? new ShopResponse(x) : x; }) : params['data'];
  Object.defineProperty(this, '__attrs', { value: params });
}

ShopResponseList.prototype.fields = ['object', 'url', 'count', 'data'];

Object.defineProperty(ShopResponseList.prototype, 'object', {
  get: function() { return this.__attrs['object']; },
  configurable: false,
  enumerable: true
});

Object.defineProperty(ShopResponseList.prototype, 'url', {
  get: function() { return this.__attrs['url']; },
  configurable: false,
  enumerable: true
});

Object.defineProperty(ShopResponseList.prototype, 'count', {
  get: function() { return this.__attrs['count']; },
  configurable: false,
  enumerable: true
});

Object.defineProperty(ShopResponseList.prototype, 'data', {
  get: function() { return this.__attrs['data']; },
  configurable: false,
  enumerable: true
});

ShopResponseList.prototype.requestBody = function shopResponseListRequestBody() {
  var result = {};
  copyIfExists(this.__attrs, result, 'object', 'requestBody');
  copyIfExists(this.__attrs, result, 'url', 'requestBody');
  copyIfExists(this.__attrs, result, 'count', 'requestBody');
  copyIfExists(this.__attrs, result, 'data', 'requestBody');
  return result;
};

ShopResponseList.prototype.queryParams = function shopResponseListQueryParams() {
  var result = {};
  return result;
};

ShopResponseList.prototype.toString = ShopResponseList.prototype.inspect = function shopResponseListToString() {
  return '[ShopResponseList\n' +
  '  object: ' + stringifyField(this.__attrs['object']) + '\n' +
  '  url: ' + stringifyField(this.__attrs['url']) + '\n' +
  '  count: ' + stringifyField(this.__attrs['count']) + '\n' +
  '  data: ' + stringifyField(this.__attrs['data']) + '\n' +
  ']';
};

module.exports.ShopResponseList = ShopResponseList;

function RecursionRequestCreate(params) {
  params = normalize(this.fields, params);
  Object.defineProperty(this, '__attrs', { value: params });
}

RecursionRequestCreate.prototype.fields = ['amount', 'currency', 'customer', 'period', 'description', 'shop', 'first_scheduled', 'uuid'];

Object.defineProperty(RecursionRequestCreate.prototype, 'amount', {
  get: function() { return this.__attrs['amount']; },

  set: function(value) {
    this.__attrs['amount'] = value;
  },
  configurable: false,
  enumerable: true
});

Object.defineProperty(RecursionRequestCreate.prototype, 'currency', {
  get: function() { return this.__attrs['currency']; },

  set: function(value) {
    this.__attrs['currency'] = value;
  },
  configurable: false,
  enumerable: true
});

Object.defineProperty(RecursionRequestCreate.prototype, 'customer', {
  get: function() { return this.__attrs['customer']; },

  set: function(value) {
    this.__attrs['customer'] = value;
  },
  configurable: false,
  enumerable: true
});

Object.defineProperty(RecursionRequestCreate.prototype, 'period', {
  get: function() { return this.__attrs['period']; },

  set: function(value) {
    this.__attrs['period'] = value;
  },
  configurable: false,
  enumerable: true
});

Object.defineProperty(RecursionRequestCreate.prototype, 'description', {
  get: function() { return this.__attrs['description']; },

  set: function(value) {
    this.__attrs['description'] = value;
  },
  configurable: false,
  enumerable: true
});

Object.defineProperty(RecursionRequestCreate.prototype, 'shop', {
  get: function() { return this.__attrs['shop']; },

  set: function(value) {
    this.__attrs['shop'] = value;
  },
  configurable: false,
  enumerable: true
});

Object.defineProperty(RecursionRequestCreate.prototype, 'firstScheduled', {
  get: function() { return this.__attrs['first_scheduled']; },

  set: function(value) {
    this.__attrs['first_scheduled'] = value;
  },
  configurable: false,
  enumerable: true
});

Object.defineProperty(RecursionRequestCreate.prototype, 'uuid', {
  get: function() { return this.__attrs['uuid']; },

  set: function(value) {
    this.__attrs['uuid'] = value;
  },
  configurable: false,
  enumerable: true
});

RecursionRequestCreate.prototype.requestBody = function recursionRequestCreateRequestBody() {
  var result = {};
  copyIfExists(this.__attrs, result, 'amount', 'requestBody');
  copyIfExists(this.__attrs, result, 'currency', 'requestBody');
  copyIfExists(this.__attrs, result, 'customer', 'requestBody');
  copyIfExists(this.__attrs, result, 'period', 'requestBody');
  copyIfExists(this.__attrs, result, 'description', 'requestBody');
  copyIfExists(this.__attrs, result, 'shop', 'requestBody');
  copyIfExists(this.__attrs, result, 'first_scheduled', 'requestBody');
  copyIfExists(this.__attrs, result, 'uuid', 'requestBody');
  return result;
};

RecursionRequestCreate.prototype.queryParams = function recursionRequestCreateQueryParams() {
  var result = {};
  return result;
};

RecursionRequestCreate.prototype.toString = RecursionRequestCreate.prototype.inspect = function recursionRequestCreateToString() {
  return '[RecursionRequestCreate\n' +
  '  amount: ' + stringifyField(this.__attrs['amount']) + '\n' +
  '  currency: ' + stringifyField(this.__attrs['currency']) + '\n' +
  '  customer: ' + stringifyField(this.__attrs['customer']) + '\n' +
  '  period: ' + stringifyField(this.__attrs['period']) + '\n' +
  '  description: ' + stringifyField(this.__attrs['description']) + '\n' +
  '  shop: ' + stringifyField(this.__attrs['shop']) + '\n' +
  '  firstScheduled: ' + stringifyField(this.__attrs['first_scheduled']) + '\n' +
  '  uuid: ' + stringifyField(this.__attrs['uuid']) + '\n' +
  ']';
};


RecursionRequestCreate.create = function createRecursionRequestCreate(params) {
  if (params === null || params === undefined) {
    return noConversionError('RecursionRequestCreate', params);
  }
  if (params instanceof RecursionRequestCreate) {
    return params;
  }

  if (_.isPlainObject(params)) { return new RecursionRequestCreate(params); }
  return noConversionError('RecursionRequestCreate', params);
};
module.exports.RecursionRequestCreate = RecursionRequestCreate;

function RecursionIdRequest(params) {
  params = normalize(this.fields, params);
  Object.defineProperty(this, '__attrs', { value: params });
}

RecursionIdRequest.prototype.fields = ['id'];

Object.defineProperty(RecursionIdRequest.prototype, 'id', {
  get: function() { return this.__attrs['id']; },

  set: function(value) {
    this.__attrs['id'] = value;
  },
  configurable: false,
  enumerable: true
});

RecursionIdRequest.prototype.requestBody = function recursionIdRequestRequestBody() {
  var result = {};
  return result;
};

RecursionIdRequest.prototype.queryParams = function recursionIdRequestQueryParams() {
  var result = {};
  return result;
};

RecursionIdRequest.prototype.toString = RecursionIdRequest.prototype.inspect = function recursionIdRequestToString() {
  return '[RecursionIdRequest\n' +
  '  id: ' + stringifyField(this.__attrs['id']) + '\n' +
  ']';
};


RecursionIdRequest.create = function createRecursionIdRequest(params) {
  if (params === null || params === undefined) {
    return noConversionError('RecursionIdRequest', params);
  }
  if (params instanceof RecursionIdRequest) {
    return params;
  }

  if (_.isObject(params) && params instanceof RecursionResponse) { return new RecursionIdRequest({'id': params.id}); }
  if (_.isString(params)) { return new RecursionIdRequest({'id': params}); }
  if (_.isPlainObject(params)) { return new RecursionIdRequest(params); }
  return noConversionError('RecursionIdRequest', params);
};
module.exports.RecursionIdRequest = RecursionIdRequest;

function RecursionRequestResume(params) {
  params = normalize(this.fields, params);
  Object.defineProperty(this, '__attrs', { value: params });
}

RecursionRequestResume.prototype.fields = ['id', 'retry'];

Object.defineProperty(RecursionRequestResume.prototype, 'id', {
  get: function() { return this.__attrs['id']; },

  set: function(value) {
    this.__attrs['id'] = value;
  },
  configurable: false,
  enumerable: true
});

Object.defineProperty(RecursionRequestResume.prototype, 'retry', {
  get: function() { return this.__attrs['retry']; },

  set: function(value) {
    this.__attrs['retry'] = value;
  },
  configurable: false,
  enumerable: true
});

RecursionRequestResume.prototype.requestBody = function recursionRequestResumeRequestBody() {
  var result = {};
  copyIfExists(this.__attrs, result, 'retry', 'requestBody');
  return result;
};

RecursionRequestResume.prototype.queryParams = function recursionRequestResumeQueryParams() {
  var result = {};
  return result;
};

RecursionRequestResume.prototype.toString = RecursionRequestResume.prototype.inspect = function recursionRequestResumeToString() {
  return '[RecursionRequestResume\n' +
  '  id: ' + stringifyField(this.__attrs['id']) + '\n' +
  '  retry: ' + stringifyField(this.__attrs['retry']) + '\n' +
  ']';
};


RecursionRequestResume.create = function createRecursionRequestResume(params) {
  if (params === null || params === undefined) {
    return noConversionError('RecursionRequestResume', params);
  }
  if (params instanceof RecursionRequestResume) {
    return params;
  }

  if (_.isObject(params) && params instanceof RecursionResponse) { return new RecursionRequestResume({'id': params.id}); }
  if (_.isString(params)) { return new RecursionRequestResume({'id': params}); }
  if (_.isPlainObject(params)) { return new RecursionRequestResume(params); }
  return noConversionError('RecursionRequestResume', params);
};
module.exports.RecursionRequestResume = RecursionRequestResume;

function RecursionListRequest(params) {
  params = normalize(this.fields, params);
  params['created'] = _.isObject(params['created']) ? new CreatedRange(params['created']) : params['created'];
  Object.defineProperty(this, '__attrs', { value: params });
}

RecursionListRequest.prototype.fields = ['count', 'offset', 'created', 'customer', 'shop', 'suspended'];

Object.defineProperty(RecursionListRequest.prototype, 'count', {
  get: function() { return this.__attrs['count']; },

  set: function(value) {
    this.__attrs['count'] = value;
  },
  configurable: false,
  enumerable: true
});

Object.defineProperty(RecursionListRequest.prototype, 'offset', {
  get: function() { return this.__attrs['offset']; },

  set: function(value) {
    this.__attrs['offset'] = value;
  },
  configurable: false,
  enumerable: true
});

Object.defineProperty(RecursionListRequest.prototype, 'created', {
  get: function() { return this.__attrs['created']; },

  set: function(value) {
    value = _.isObject(value) ? new CreatedRange(value) : value;
    this.__attrs['created'] = value;
  },
  configurable: false,
  enumerable: true
});

Object.defineProperty(RecursionListRequest.prototype, 'customer', {
  get: function() { return this.__attrs['customer']; },

  set: function(value) {
    this.__attrs['customer'] = value;
  },
  configurable: false,
  enumerable: true
});

Object.defineProperty(RecursionListRequest.prototype, 'shop', {
  get: function() { return this.__attrs['shop']; },

  set: function(value) {
    this.__attrs['shop'] = value;
  },
  configurable: false,
  enumerable: true
});

Object.defineProperty(RecursionListRequest.prototype, 'suspended', {
  get: function() { return this.__attrs['suspended']; },

  set: function(value) {
    this.__attrs['suspended'] = value;
  },
  configurable: false,
  enumerable: true
});

RecursionListRequest.prototype.requestBody = function recursionListRequestRequestBody() {
  var result = {};
  return result;
};

RecursionListRequest.prototype.queryParams = function recursionListRequestQueryParams() {
  var result = {};
  copyIfExists(this.__attrs, result, 'count', 'queryParams');
  copyIfExists(this.__attrs, result, 'offset', 'queryParams');
  copyIfExists(this.__attrs, result, 'created', 'queryParams');
  copyIfExists(this.__attrs, result, 'customer', 'queryParams');
  copyIfExists(this.__attrs, result, 'shop', 'queryParams');
  copyIfExists(this.__attrs, result, 'suspended', 'queryParams');
  return result;
};

RecursionListRequest.prototype.toString = RecursionListRequest.prototype.inspect = function recursionListRequestToString() {
  return '[RecursionListRequest\n' +
  '  count: ' + stringifyField(this.__attrs['count']) + '\n' +
  '  offset: ' + stringifyField(this.__attrs['offset']) + '\n' +
  '  created: ' + stringifyField(this.__attrs['created']) + '\n' +
  '  customer: ' + stringifyField(this.__attrs['customer']) + '\n' +
  '  shop: ' + stringifyField(this.__attrs['shop']) + '\n' +
  '  suspended: ' + stringifyField(this.__attrs['suspended']) + '\n' +
  ']';
};


RecursionListRequest.create = function createRecursionListRequest(params) {
  if (params === null || params === undefined) {
    return noConversionError('RecursionListRequest', params);
  }
  if (params instanceof RecursionListRequest) {
    return params;
  }

  if (_.isPlainObject(params)) { return new RecursionListRequest(params); }
  return noConversionError('RecursionListRequest', params);
};
module.exports.RecursionListRequest = RecursionListRequest;

function RecursionResponseList(params) {
  params = normalize(this.fields, params);
  params['data'] = _.isArray(params['data']) ? params['data'].map(function (x) { return _.isObject(x) ? new RecursionResponse(x) : x; }) : params['data'];
  Object.defineProperty(this, '__attrs', { value: params });
}

RecursionResponseList.prototype.fields = ['object', 'url', 'count', 'data'];

Object.defineProperty(RecursionResponseList.prototype, 'object', {
  get: function() { return this.__attrs['object']; },
  configurable: false,
  enumerable: true
});

Object.defineProperty(RecursionResponseList.prototype, 'url', {
  get: function() { return this.__attrs['url']; },
  configurable: false,
  enumerable: true
});

Object.defineProperty(RecursionResponseList.prototype, 'count', {
  get: function() { return this.__attrs['count']; },
  configurable: false,
  enumerable: true
});

Object.defineProperty(RecursionResponseList.prototype, 'data', {
  get: function() { return this.__attrs['data']; },
  configurable: false,
  enumerable: true
});

RecursionResponseList.prototype.requestBody = function recursionResponseListRequestBody() {
  var result = {};
  copyIfExists(this.__attrs, result, 'object', 'requestBody');
  copyIfExists(this.__attrs, result, 'url', 'requestBody');
  copyIfExists(this.__attrs, result, 'count', 'requestBody');
  copyIfExists(this.__attrs, result, 'data', 'requestBody');
  return result;
};

RecursionResponseList.prototype.queryParams = function recursionResponseListQueryParams() {
  var result = {};
  return result;
};

RecursionResponseList.prototype.toString = RecursionResponseList.prototype.inspect = function recursionResponseListToString() {
  return '[RecursionResponseList\n' +
  '  object: ' + stringifyField(this.__attrs['object']) + '\n' +
  '  url: ' + stringifyField(this.__attrs['url']) + '\n' +
  '  count: ' + stringifyField(this.__attrs['count']) + '\n' +
  '  data: ' + stringifyField(this.__attrs['data']) + '\n' +
  ']';
};

module.exports.RecursionResponseList = RecursionResponseList;

function EmptyRequest(params) {
  params = normalize(this.fields, params);
  Object.defineProperty(this, '__attrs', { value: params });
}

EmptyRequest.prototype.fields = [];

EmptyRequest.prototype.requestBody = function emptyRequestRequestBody() {
  var result = {};
  return result;
};

EmptyRequest.prototype.queryParams = function emptyRequestQueryParams() {
  var result = {};
  return result;
};

EmptyRequest.prototype.toString = EmptyRequest.prototype.inspect = function emptyRequestToString() {
  return '[EmptyRequest\n' +
  ']';
};


EmptyRequest.create = function createEmptyRequest(params) {
  if (params === null || params === undefined) {
    return noConversionError('EmptyRequest', params);
  }
  if (params instanceof EmptyRequest) {
    return params;
  }

  if (_.isPlainObject(params)) { return new EmptyRequest(params); }
  return noConversionError('EmptyRequest', params);
};
module.exports.EmptyRequest = EmptyRequest;

function AccountResponse(params) {
  params = normalize(this.fields, params);
  Object.defineProperty(this, '__attrs', { value: params });
}

AccountResponse.prototype.fields = ['id', 'object', 'charge_enabled', 'currencies_supported', 'details_submitted', 'email', 'statement_descriptor', 'card_types_supported'];

Object.defineProperty(AccountResponse.prototype, 'id', {
  get: function() { return this.__attrs['id']; },
  configurable: false,
  enumerable: true
});

Object.defineProperty(AccountResponse.prototype, 'object', {
  get: function() { return this.__attrs['object']; },
  configurable: false,
  enumerable: true
});

Object.defineProperty(AccountResponse.prototype, 'chargeEnabled', {
  get: function() { return this.__attrs['charge_enabled']; },
  configurable: false,
  enumerable: true
});

Object.defineProperty(AccountResponse.prototype, 'currenciesSupported', {
  get: function() { return this.__attrs['currencies_supported']; },
  configurable: false,
  enumerable: true
});

Object.defineProperty(AccountResponse.prototype, 'detailsSubmitted', {
  get: function() { return this.__attrs['details_submitted']; },
  configurable: false,
  enumerable: true
});

Object.defineProperty(AccountResponse.prototype, 'email', {
  get: function() { return this.__attrs['email']; },
  configurable: false,
  enumerable: true
});

Object.defineProperty(AccountResponse.prototype, 'statementDescriptor', {
  get: function() { return this.__attrs['statement_descriptor']; },
  configurable: false,
  enumerable: true
});

Object.defineProperty(AccountResponse.prototype, 'cardTypesSupported', {
  get: function() { return this.__attrs['card_types_supported']; },
  configurable: false,
  enumerable: true
});

AccountResponse.prototype.requestBody = function accountResponseRequestBody() {
  var result = {};
  copyIfExists(this.__attrs, result, 'id', 'requestBody');
  copyIfExists(this.__attrs, result, 'object', 'requestBody');
  copyIfExists(this.__attrs, result, 'charge_enabled', 'requestBody');
  copyIfExists(this.__attrs, result, 'currencies_supported', 'requestBody');
  copyIfExists(this.__attrs, result, 'details_submitted', 'requestBody');
  copyIfExists(this.__attrs, result, 'email', 'requestBody');
  copyIfExists(this.__attrs, result, 'statement_descriptor', 'requestBody');
  copyIfExists(this.__attrs, result, 'card_types_supported', 'requestBody');
  return result;
};

AccountResponse.prototype.queryParams = function accountResponseQueryParams() {
  var result = {};
  return result;
};

AccountResponse.prototype.toString = AccountResponse.prototype.inspect = function accountResponseToString() {
  return '[AccountResponse\n' +
  '  id: ' + stringifyField(this.__attrs['id']) + '\n' +
  '  object: ' + stringifyField(this.__attrs['object']) + '\n' +
  '  chargeEnabled: ' + stringifyField(this.__attrs['charge_enabled']) + '\n' +
  '  currenciesSupported: ' + stringifyField(this.__attrs['currencies_supported']) + '\n' +
  '  detailsSubmitted: ' + stringifyField(this.__attrs['details_submitted']) + '\n' +
  '  email: ' + stringifyField(this.__attrs['email']) + '\n' +
  '  statementDescriptor: ' + stringifyField(this.__attrs['statement_descriptor']) + '\n' +
  '  cardTypesSupported: ' + stringifyField(this.__attrs['card_types_supported']) + '\n' +
  ']';
};

module.exports.AccountResponse = AccountResponse;

function DeletedResponse(params) {
  params = normalize(this.fields, params);
  Object.defineProperty(this, '__attrs', { value: params });
}

DeletedResponse.prototype.fields = ['deleted'];

Object.defineProperty(DeletedResponse.prototype, 'deleted', {
  get: function() { return this.__attrs['deleted']; },
  configurable: false,
  enumerable: true
});

DeletedResponse.prototype.requestBody = function deletedResponseRequestBody() {
  var result = {};
  copyIfExists(this.__attrs, result, 'deleted', 'requestBody');
  return result;
};

DeletedResponse.prototype.queryParams = function deletedResponseQueryParams() {
  var result = {};
  return result;
};

DeletedResponse.prototype.toString = DeletedResponse.prototype.inspect = function deletedResponseToString() {
  return '[DeletedResponse\n' +
  '  deleted: ' + stringifyField(this.__attrs['deleted']) + '\n' +
  ']';
};

module.exports.DeletedResponse = DeletedResponse;

function ErrorBody(params) {
  params = normalize(this.fields, params);
  Object.defineProperty(this, '__attrs', { value: params });
}

ErrorBody.prototype.fields = ['message', 'type', 'caused_by', 'code', 'param', 'charge'];

Object.defineProperty(ErrorBody.prototype, 'message', {
  get: function() { return this.__attrs['message']; },
  configurable: false,
  enumerable: true
});

Object.defineProperty(ErrorBody.prototype, 'type', {
  get: function() { return this.__attrs['type']; },
  configurable: false,
  enumerable: true
});

Object.defineProperty(ErrorBody.prototype, 'causedBy', {
  get: function() { return this.__attrs['caused_by']; },
  configurable: false,
  enumerable: true
});

Object.defineProperty(ErrorBody.prototype, 'code', {
  get: function() { return this.__attrs['code']; },
  configurable: false,
  enumerable: true
});

Object.defineProperty(ErrorBody.prototype, 'param', {
  get: function() { return this.__attrs['param']; },
  configurable: false,
  enumerable: true
});

Object.defineProperty(ErrorBody.prototype, 'charge', {
  get: function() { return this.__attrs['charge']; },
  configurable: false,
  enumerable: true
});

ErrorBody.prototype.requestBody = function errorBodyRequestBody() {
  var result = {};
  copyIfExists(this.__attrs, result, 'message', 'requestBody');
  copyIfExists(this.__attrs, result, 'type', 'requestBody');
  copyIfExists(this.__attrs, result, 'caused_by', 'requestBody');
  copyIfExists(this.__attrs, result, 'code', 'requestBody');
  copyIfExists(this.__attrs, result, 'param', 'requestBody');
  copyIfExists(this.__attrs, result, 'charge', 'requestBody');
  return result;
};

ErrorBody.prototype.queryParams = function errorBodyQueryParams() {
  var result = {};
  return result;
};

ErrorBody.prototype.toString = ErrorBody.prototype.inspect = function errorBodyToString() {
  return '[ErrorBody\n' +
  '  message: ' + stringifyField(this.__attrs['message']) + '\n' +
  '  type: ' + stringifyField(this.__attrs['type']) + '\n' +
  '  causedBy: ' + stringifyField(this.__attrs['caused_by']) + '\n' +
  '  code: ' + stringifyField(this.__attrs['code']) + '\n' +
  '  param: ' + stringifyField(this.__attrs['param']) + '\n' +
  '  charge: ' + stringifyField(this.__attrs['charge']) + '\n' +
  ']';
};

module.exports.ErrorBody = ErrorBody;

function ErrorData(params) {
  params = normalize(this.fields, params);
  params['error'] = _.isObject(params['error']) ? new ErrorBody(params['error']) : params['error'];
  Object.defineProperty(this, '__attrs', { value: params });
}

ErrorData.prototype.fields = ['error'];

Object.defineProperty(ErrorData.prototype, 'error', {
  get: function() { return this.__attrs['error']; },
  configurable: false,
  enumerable: true
});

ErrorData.prototype.requestBody = function errorDataRequestBody() {
  var result = {};
  copyIfExists(this.__attrs, result, 'error', 'requestBody');
  return result;
};

ErrorData.prototype.queryParams = function errorDataQueryParams() {
  var result = {};
  return result;
};

ErrorData.prototype.toString = ErrorData.prototype.inspect = function errorDataToString() {
  return '[ErrorData\n' +
  '  error: ' + stringifyField(this.__attrs['error']) + '\n' +
  ']';
};

module.exports.ErrorData = ErrorData;

