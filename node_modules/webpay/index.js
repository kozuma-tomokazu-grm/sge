var http = require('http');
var https = require('https');
var url = require('url');
var util = require('util');
var qs = require('qs');
var _ = require('lodash');

var resources = require('./resources');
var dataTypes = require('./data_types');
var error = require('./error');

function Client(authToken, options) {
  this.requestOptions = {
    headers: {
      'Content-Type': 'application/json',
      'Accept': 'application/json',
      'User-Agent': 'Apipa-webpay/2.1.1 node',
      'Accept-Language': 'en',
    }
  };


  this.requestOptions.headers['Authorization'] = 'Bearer ' + authToken;

  var apiBase = url.parse(options['api_base'] || 'https://api.webpay.jp/v1');
  this.requestOptions.hostname = apiBase.hostname;
  this.requestOptions.port = apiBase.port;

  this.prefix = apiBase.pathname;
  if (this.prefix[this.prefix.length - 1] !== '/')
    this.prefix += '/';
  this.httpRequest = apiBase.protocol === 'https:' ? https.request : http.request;
}

Client.prototype.request = function request(method, path, paramData, callback) {
  var query = '';
  var queryParams = paramData.queryParams();
  if (!_.isEmpty(queryParams)) {
    query = '?' + qs.stringify(queryParams);
  }
  var resReader = function(res) {
    var response = '';
    res.setEncoding('utf8');
    res.on('data', function (chunk) {
      response += chunk;
    });
    res.on('end', function () {
      var data, err, status;
      status = res.statusCode;
      try {
        data = JSON.parse(response);
      } catch (e) {
        error.invalidJson(e, callback);
      }
      if (res.statusCode >= 200 && res.statusCode < 300) {
        callback(null, data);
      } else {
        if ( status === 400 ) {
          err = new error.errorResponse.InvalidRequestError(status, data);
          return callback(err, null);
        }
        if ( status === 401 ) {
          err = new error.errorResponse.AuthenticationError(status, data);
          return callback(err, null);
        }
        if ( status === 402 ) {
          err = new error.errorResponse.CardError(status, data);
          return callback(err, null);
        }
        if ( status === 404 ) {
          err = new error.errorResponse.InvalidRequestError(status, data);
          return callback(err, null);
        }
        if ( true ) {
          err = new error.errorResponse.ApiError(status, data);
          return callback(err, null);
        }
        callback(new Error('Unknown error is returned'), null);
      }
    });
  };
  var body = method === 'get' ? '' : JSON.stringify(paramData.requestBody());
  var options = util._extend({
    method: method,
    path: this.prefix + path + query
  }, this.requestOptions);
  options.headers['Content-Length'] = Buffer.byteLength(body, 'utf8');

  var req = this.httpRequest(options, resReader);
  req.on('error', function(e) { error.inRequest(e, callback); });
  req.write(body);
  req.end();
};

function WebPay(authToken, options) {
  var client = new Client(authToken, options || {});
  this.client = client;
  this.charge = new resources.Charge(client);
  this.customer = new resources.Customer(client);
  this.token = new resources.Token(client);
  this.event = new resources.Event(client);
  this.shop = new resources.Shop(client);
  this.recursion = new resources.Recursion(client);
  this.account = new resources.Account(client);
}

WebPay.prototype.setAcceptLanguage = function (value) {
  this.client.requestOptions.headers['Accept-Language'] = value;
};



WebPay.prototype.receiveWebhook = function receiveWebhook(requestBody) {
  var data;
  try {
    data = JSON.parse(requestBody);
  } catch (e) {
    throw new error.ApiConnectionError('Webhook request body is invalid JSON string', e);
  }
  return new dataTypes.EventResponse(data);
};

module.exports = _.assign(WebPay, error);
